@page
@model RoadInfrastructureAssetManagementFrontend.Pages.Incidents.IncidentCreateModel
@{
    Layout = "_Layout"; // Sử dụng layout chung
}

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            background-color: #f4f6f9;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .container {
            margin-top: 40px;
            max-width: 1200px;
        }

        .form-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            padding: 30px;
            margin-bottom: 40px;
        }

        h1 {
            font-size: 2.5rem;
            color: #2c3e50;
            font-weight: 700;
            margin-bottom: 30px;
            text-align: center;
        }

        h3 {
            font-size: 1.75rem;
            color: #34495e;
            font-weight: 600;
            margin-bottom: 20px;
            border-bottom: 2px solid #3498db;
            padding-bottom: 5px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-control {
            border-radius: 8px;
            padding: 10px;
        }

        .btn-primary {
            background-color: #3498db;
            border-color: #3498db;
            padding: 10px 20px;
            font-size: 1rem;
            border-radius: 8px;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .btn-primary:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

        .btn-secondary {
            background-color: #34495e;
            border-color: #34495e;
            padding: 10px 20px;
            font-size: 1rem;
            border-radius: 8px;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .btn-secondary:hover {
            background-color: #2c3e50;
            transform: translateY(-2px);
        }

        .btn i {
            margin-right: 8px;
        }

        #map {
            height: 400px;
            width: 100%;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        .text-muted {
            color: #7f8c8d;
        }

        .alert {
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Tạo Incident Mới</h1>

        <div class="form-container">
            <h3>Thông tin Incident</h3>

            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger" role="alert">
                    @TempData["Error"]
                </div>
            }
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success" role="alert">
                    @TempData["Success"]
                </div>
            }
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger" role="alert">
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <p>@error.ErrorMessage</p>
                    }
                </div>
            }

            <form method="post" enctype="multipart/form-data">
                <div class="form-group">
                    <label for="geometryType">Loại hình học</label>
                    <select class="form-control" id="geometryType" asp-for="Incident.location.type" required>
                        <option value="">Chọn loại</option>
                        <option value="Point">Điểm</option>
                        <option value="LineString">Đường</option>
                    </select>
                    <span asp-validation-for="Incident.location.type" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label for="GeometrySystem">Hệ tọa độ</label>
                    <select class="form-control" id="GeometrySystem" name="GeometrySystem" required>
                        <option value="">Chọn hệ tọa độ</option>
                        <option value="wgs84">WGS84</option>
                        <option value="vn2000">VN2000</option>
                    </select>
                    <span asp-validation-for="GeometrySystem" class="text-danger"></span>
                </div>

                <div id="map"></div>
                <div id="coordinatesInput">
                    <p id="instructionText" class="text-muted">Chọn loại hình học để bắt đầu.</p>
                    <div id="manualCoordinates" class="mt-3">
                        <div class="form-group" id="pointCoordsGroup">
                            <label for="manualLat">Vĩ độ (Latitude):</label>
                            <input type="text" id="manualLat" class="form-control" placeholder="Nhập vĩ độ" />
                        </div>
                        <div class="form-group" id="pointCoordsGroup">
                            <label for="manualLng">Kinh độ (Longitude):</label>
                            <input type="text" id="manualLng" class="form-control" placeholder="Nhập kinh độ" />
                        </div>
                        <div class="form-group" id="lineCoordsGroup" style="display: none;">
                            <label for="manualCoords">Tọa độ (dạng JSON):</label>
                            <textarea id="manualCoords" class="form-control" rows="3" placeholder='Ví dụ: [[x1, y1], [x2, y2]]'></textarea>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="coordinatesJson" name="Incident.location.coordinates" />

                <div class="form-group">
                    <label asp-for="Incident.asset_id">Asset ID</label>
                    <input asp-for="Incident.asset_id" id="Incident_asset_id" class="form-control" type="number" min="0" />
                    <span asp-validation-for="Incident.asset_id" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Incident.reported_by">Reported By (ID Người dùng)</label>
                    <input asp-for="Incident.reported_by" class="form-control" type="number" min="1" required />
                    <span asp-validation-for="Incident.reported_by" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Incident.incident_type">Incident Type</label>
                    <input asp-for="Incident.incident_type" class="form-control" required />
                    <span asp-validation-for="Incident.incident_type" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Incident.description">Description</label>
                    <textarea asp-for="Incident.description" class="form-control" rows="3" required></textarea>
                    <span asp-validation-for="Incident.description" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Incident.priority">Priority</label>
                    <select asp-for="Incident.priority" class="form-control" required>
                        <option value="">Chọn mức độ ưu tiên</option>
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                        <option value="critical">Critical</option>
                    </select>
                    <span asp-validation-for="Incident.priority" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Incident.status">Status</label>
                    <select asp-for="Incident.status" class="form-control" required>
                        <option value="">Chọn trạng thái</option>
                        <option value="reported">Reported</option>
                        <option value="under review">Under Review</option>
                        <option value="resolved">Resolved</option>
                        <option value="closed">Closed</option>
                    </select>
                    <span asp-validation-for="Incident.status" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Incident.resolved_at">Resolved At</label>
                    <input asp-for="Incident.resolved_at" class="form-control" type="datetime-local" />
                    <span asp-validation-for="Incident.resolved_at" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Incident.notes">Notes</label>
                    <textarea asp-for="Incident.notes" class="form-control" rows="3" required></textarea>
                    <span asp-validation-for="Incident.notes" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label for="Images">Ảnh liên quan (có thể chọn nhiều ảnh)</label>
                    <input type="file" class="form-control" id="Images" name="Images" multiple accept="image/*" />
                </div>

                <div class="form-group text-center">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Tạo Incident
                    </button>
                    <a href="/Incidents/Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Quay lại
                    </a>
                </div>
            </form>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script>
        var map;
        var geometryType = document.getElementById('geometryType');
        var coordinatesJsonInput = document.getElementById('coordinatesJson');
        var instructionText = document.getElementById('instructionText');
        var manualLat = document.getElementById('manualLat');
        var manualLng = document.getElementById('manualLng');
        var manualCoords = document.getElementById('manualCoords');
        var pointCoordsGroup = document.getElementById('pointCoordsGroup');
        var lineCoordsGroup = document.getElementById('lineCoordsGroup');
        var marker;
        var polyline;
        var points = [];
        var currentGeoType = '';
        var allAssets = [];
        var assetLayer;
        var radius = 100; // Bán kính (mét)
        var assetCategories = @Html.Raw(Json.Serialize(Model.AssetCategories)); // Truyền AssetCategories từ backend

        function loadAllAssets() {
            return fetch('http://localhost:8080/geoserver/wfs?service=WFS&request=GetFeature&typeName=cite:valid_road_assets_layer&outputFormat=application/json')
                .then(response => {
                    if (!response.ok) throw new Error('Failed to fetch assets');
                    return response.json();
                })
                .then(data => {
                    allAssets = data.features || [];
                    console.log("All assets loaded:", allAssets);
                    if (allAssets.length === 0) console.warn("No assets found from GeoServer");
                })
                .catch(error => console.error("Error loading assets:", error));
        }

        function findNearbyAssets(latlng) {
            assetLayer.clearLayers();
            var nearbyAssets = [];

            allAssets.forEach(asset => {
                var assetLatLng = getAssetLatLng(asset);
                if (assetLatLng) {
                    var distance = map.distance(latlng, assetLatLng);
                    if (distance <= radius) {
                        nearbyAssets.push(asset);
                        var category = assetCategories.find(cat => cat.cagetory_id === asset.properties.category_id);
                        var iconUrl = category ? category.marker_url : "https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png";
                        var marker = L.marker(assetLatLng, {
                            icon: L.icon({
                                iconUrl: iconUrl,
                                iconSize: [25, 41],
                                iconAnchor: [12, 41]
                            })
                        }).addTo(assetLayer);
                        marker.bindPopup(`
                            <b>Asset ID:</b> ${asset.properties.asset_id}<br>
                            <b>Loại:</b> ${category ? category.cagetory_name : asset.properties.category_id}<br>
                            <button onclick="selectAsset(${asset.properties.asset_id})">Chọn</button>
                        `);
                    }
                }
            });

            console.log("Nearby assets:", nearbyAssets);
            return nearbyAssets;
        }

        function getAssetLatLng(asset) {
            if (asset.geometry.type === "Point") {
                return L.latLng(asset.geometry.coordinates[1], asset.geometry.coordinates[0]);
            } else if (asset.geometry.type === "LineString") {
                var coords = asset.geometry.coordinates;
                var midIndex = Math.floor(coords.length / 2);
                return L.latLng(coords[midIndex][1], coords[midIndex][0]);
            }
            return null;
        }

        function selectAsset(assetId) {
            document.getElementById('Incident_asset_id').value = assetId;
            console.log("Selected asset ID:", assetId);
            assetLayer.eachLayer(layer => {
                if (layer.getPopup().getContent().includes(`Asset ID: ${assetId}`)) {
                    layer.openPopup();
                } else {
                    layer.closePopup();
                }
            });
        }

        function onMapClickPoint(e) {
            var lat = e.latlng.lat;
            var lng = e.latlng.lng;
            if (marker) {
                marker.setLatLng(e.latlng);
            } else {
                marker = L.marker(e.latlng).addTo(map);
            }
            var coordinates = [lng, lat];
            coordinatesJsonInput.value = JSON.stringify(coordinates);
            document.getElementById('GeometrySystem').value = 'wgs84';
            manualLat.value = lat;
            manualLng.value = lng;

            findNearbyAssets(e.latlng);
        }

        function onMapClickLine(e) {
            points.push([e.latlng.lat, e.latlng.lng]);
            if (polyline) {
                polyline.setLatLngs(points);
            } else {
                polyline = L.polyline(points, { color: 'blue' }).addTo(map);
            }
            var coordinates = points.map(p => [p[1], p[0]]);
            coordinatesJsonInput.value = JSON.stringify(coordinates);
            document.getElementById('GeometrySystem').value = 'wgs84';
            manualCoords.value = JSON.stringify(coordinates);

            var midIndex = Math.floor(points.length / 2);
            var midLatLng = points[midIndex];
            findNearbyAssets(L.latLng(midLatLng[0], midLatLng[1]));
        }

        function finishLineString() {
            if (points.length < 2) {
                alert('Đường cần ít nhất 2 điểm.');
                return;
            }
            var coordinates = points.map(p => [p[1], p[0]]);
            coordinatesJsonInput.value = JSON.stringify(coordinates);
            manualCoords.value = JSON.stringify(coordinates);
            map.off('click').off('dblclick');

            var midIndex = Math.floor(points.length / 2);
            var midLatLng = points[midIndex];
            findNearbyAssets(L.latLng(midLatLng[0], midLatLng[1]));
        }

        manualLat.oninput = manualLng.oninput = function () {
            if (currentGeoType === 'Point' && manualLat.value && manualLng.value) {
                var lat = parseFloat(manualLat.value);
                var lng = parseFloat(manualLng.value);
                if (!isNaN(lat) && !isNaN(lng)) {
                    var coordinates = [lng, lat];
                    coordinatesJsonInput.value = JSON.stringify(coordinates);
                    if (marker) {
                        marker.setLatLng([lat, lng]);
                    } else {
                        marker = L.marker([lat, lng]).addTo(map);
                    }
                    map.setView([lat, lng], 13);
                    findNearbyAssets(L.latLng(lat, lng));
                }
            }
        };

        manualCoords.oninput = function () {
            if (currentGeoType === 'LineString' && manualCoords.value) {
                try {
                    var coordinates = JSON.parse(manualCoords.value);
                    coordinatesJsonInput.value = JSON.stringify(coordinates);
                    if (polyline) {
                        map.removeLayer(polyline);
                    }
                    points = coordinates.map(c => [c[1], c[0]]);
                    polyline = L.polyline(points, { color: 'blue' }).addTo(map);
                    map.fitBounds(polyline.getBounds());

                    var midIndex = Math.floor(points.length / 2);
                    var midLatLng = points[midIndex];
                    findNearbyAssets(L.latLng(midLatLng[0], midLatLng[1]));
                } catch (e) {
                    console.error('Invalid LineString JSON:', e);
                }
            }
        };

        document.querySelector('form').addEventListener('submit', function (e) {
            if (!coordinatesJsonInput.value) {
                alert('Vui lòng chọn tọa độ trên bản đồ hoặc nhập thủ công!');
                e.preventDefault();
            }
        });

        document.addEventListener('DOMContentLoaded', function () {
            map = L.map('map').setView([21.0285, 105.8542], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
            assetLayer = L.layerGroup().addTo(map);

            loadAllAssets().then(() => {
                geometryType.addEventListener('change', function () {
                    var type = this.value;
                    currentGeoType = type;
                    points = [];
                    if (marker) map.removeLayer(marker);
                    if (polyline) map.removeLayer(polyline);
                    manualLat.value = '';
                    manualLng.value = '';
                    manualCoords.value = '';
                    coordinatesJsonInput.value = '';
                    assetLayer.clearLayers();

                    if (type === 'Point') {
                        instructionText.textContent = 'Nhấp vào bản đồ để chọn điểm hoặc nhập tọa độ thủ công.';
                        pointCoordsGroup.style.display = 'block';
                        lineCoordsGroup.style.display = 'none';
                        map.on('click', onMapClickPoint);
                        map.off('dblclick');
                    } else if (type === 'LineString') {
                        instructionText.textContent = 'Nhấp để thêm điểm cho đường (nhấp đúp để hoàn thành) hoặc nhập tọa độ thủ công.';
                        pointCoordsGroup.style.display = 'none';
                        lineCoordsGroup.style.display = 'block';
                        map.on('click', onMapClickLine);
                        map.on('dblclick', finishLineString);
                    } else {
                        instructionText.textContent = 'Chọn loại hình học để bắt đầu.';
                        pointCoordsGroup.style.display = 'none';
                        lineCoordsGroup.style.display = 'none';
                        map.off('click').off('dblclick');
                    }
                });
            });
        });
    </script>
</body>
</html>