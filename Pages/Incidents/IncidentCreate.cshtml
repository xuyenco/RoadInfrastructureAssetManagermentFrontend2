@page
@model RoadInfrastructureAssetManagementFrontend2.Pages.Incidents.IncidentCreateModel
@{
    Layout = "_Layout";
}
<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        #map {
            height: 400px;
            width: 100%;
            border-radius: 0.5rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }

        main {
            overflow-y: auto !important;
        }

        body {
            background-color: #f4f6f9;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
    </style>
</head>
<body>
    <div class="container mx-auto px-4 py-10 max-w-4xl">
        <h1 class="text-3xl font-bold text-gray-800 mb-6 text-center">Tạo Incident Mới</h1>

        <div class="bg-white rounded-lg shadow-lg p-6">
            <h3 class="text-2xl font-semibold text-gray-700 mb-4 border-b-2 border-blue-500 pb-2">Thông tin Incident</h3>

            @if (TempData["Error"] != null)
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg mb-4" role="alert">
                    @TempData["Error"]
                </div>
            }
            @if (TempData["Success"] != null)
            {
                <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg mb-4" role="alert">
                    @TempData["Success"]
                    @if (TempData["SuccessCount"] != null)
                    {
                        <p>Đã nhập thành công @TempData["SuccessCount"] incident.</p>
                    }
                    @if (TempData["ErrorFile"] != null)
                    {
                        <br />
                        <a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,@TempData["ErrorFile"]"
                           download="Incident_Error_Rows.xlsx" class="inline-flex items-center px-3 py-1 bg-red-500 text-white rounded-md hover:bg-red-600 transition duration-200">
                            <i class="fas fa-download mr-2"></i> Tải file lỗi
                        </a>
                    }
                </div>
            }
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg mb-4" role="alert">
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <p>@error.ErrorMessage</p>
                    }
                </div>
            }

            <!-- Form nhập thủ công -->
            <form method="post" enctype="multipart/form-data" asp-page-handler="Create">
                <div class="space-y-6">
                    <div>
                        <label for="address" class="block text-gray-700 font-semibold mb-1">Địa chỉ</label>
                        <input asp-for="Incident.address" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        <span asp-validation-for="Incident.address" class="text-red-500 text-sm"></span>
                    </div>

                    <div>
                        <label asp-for="Incident.incident_type" class="block text-gray-700 font-semibold mb-1">Loại sự cố</label>
                        <select asp-for="Incident.incident_type" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                            <option value="">Chọn loại tai nạn</option>
                            <option value="Tai nạn giao thông">Tai nạn giao thông</option>
                            <option value="Hư hỏng kết cấu hạ tầng">Hư hỏng kết cấu hạ tầng</option>
                            <option value="Sự cố môi trường">Sự cố môi trường</option>
                        </select>
                        <span asp-validation-for="Incident.incident_type" class="text-red-500 text-sm"></span>
                    </div>

                    <div>
                        <label for="route" class="block text-gray-700 font-semibold mb-1">Tuyến đường</label>
                        <input asp-for="Incident.route" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        <span asp-validation-for="Incident.route" class="text-red-500 text-sm"></span>
                    </div>

                    <div>
                        <label for="geometryType" class="block text-gray-700 font-semibold mb-1">Loại hình học</label>
                        <select asp-for="Incident.geometry.type" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" id="geometryType" required>
                            <option value="">Chọn loại</option>
                            <option value="Point">Điểm</option>
                            <option value="LineString">Đường</option>
                        </select>
                        <span asp-validation-for="Incident.geometry.type" class="text-red-500 text-sm"></span>
                    </div>

                    <div>
                        <label for="GeometrySystem" class="block text-gray-700 font-semibold mb-1">Hệ tọa độ</label>
                        <select asp-for="GeometrySystem" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" id="GeometrySystem" required>
                            <option value="">Chọn hệ tọa độ</option>
                            <option value="wgs84">WGS84</option>
                            <option value="vn2000">VN2000</option>
                        </select>
                        <span asp-validation-for="GeometrySystem" class="text-red-500 text-sm"></span>
                    </div>

                    <div id="map"></div>
                    <div id="coordinatesInput">
                        <p id="instructionText" class="text-gray-500 mb-3">Chọn loại hình học để bắt đầu.</p>
                        <div id="manualCoordinates" class="space-y-4">
                            <div id="pointCoordsGroup">
                                <label for="manualLat" class="block text-gray-700 font-semibold mb-1">Vĩ độ (Latitude)</label>
                                <input type="text" id="manualLat" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Nhập vĩ độ" />
                            </div>
                            <div id="pointCoordsGroup">
                                <label for="manualLng" class="block text-gray-700 font-semibold mb-1">Kinh độ (Longitude)</label>
                                <input type="text" id="manualLng" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Nhập kinh độ" />
                            </div>
                            <div id="lineCoordsGroup" class="hidden">
                                <label for="manualCoords" class="block text-gray-700 font-semibold mb-1">Tọa độ (dạng JSON)</label>
                                <textarea id="manualCoords" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" rows="3" placeholder='Ví dụ: [[x1, y1], [x2, y2]]'></textarea>
                            </div>
                        </div>
                    </div>
                    <input type="hidden" id="coordinatesJson" name="Incident.geometry.coordinates" />

                    <div>
                        <label asp-for="Incident.severity_level" class="block text-gray-700 font-semibold mb-1">Mức độ nghiêm trọng</label>
                        <select asp-for="Incident.severity_level" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                            <option value="">Chọn mức độ</option>
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                            <option value="critical">Critical</option>
                        </select>
                        <span asp-validation-for="Incident.severity_level" class="text-red-500 text-sm"></span>
                    </div>

                    <div>
                        <label asp-for="Incident.damage_level" class="block text-gray-700 font-semibold mb-1">Mức độ hư hỏng</label>
                        <select asp-for="Incident.damage_level" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                            <option value="">Chọn mức độ</option>
                            <option value="minor">Minor</option>
                            <option value="moderate">Moderate</option>
                            <option value="severe">Severe</option>
                        </select>
                        <span asp-validation-for="Incident.damage_level" class="text-red-500 text-sm"></span>
                    </div>

                    <div>
                        <label asp-for="Incident.processing_status" class="block text-gray-700 font-semibold mb-1">Trạng thái xử lý</label>
                        <select asp-for="Incident.processing_status" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                            <option value="">Chọn trạng thái</option>
                            <option value="reported">Reported</option>
                            <option value="under review">Under Review</option>
                            <option value="resolved">Resolved</option>
                            <option value="closed">Closed</option>
                        </select>
                        <span asp-validation-for="Incident.processing_status" class="text-red-500 text-sm"></span>
                    </div>

                    <div>
                        <label asp-for="Incident.task_id" class="block text-gray-700 font-semibold mb-1">Mã nhiệm vụ</label>
                        <input asp-for="Incident.task_id" type="number" min="0" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        <span asp-validation-for="Incident.task_id" class="text-red-500 text-sm"></span>
                    </div>

                    <div>
                        <label for="Images" class="block text-gray-700 font-semibold mb-1">Ảnh liên quan (có thể chọn nhiều ảnh)</label>
                        <input type="file" id="Images" name="Images" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" multiple accept="image/*" />
                    </div>

                    <div class="flex justify-center space-x-4 mt-6">
                        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition duration-200 flex items-center">
                            <i class="fas fa-save mr-2"></i> Tạo Incident
                        </button>
                        <a href="/Incidents/Index" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition duration-200 flex items-center">
                            <i class="fas fa-arrow-left mr-2"></i> Quay lại
                        </a>
                    </div>
                </div>
            </form>
            @if(HttpContext.Session.GetString("Role") != null)
            {
                <!-- Form nhập từ Excel -->
                <h3 class="text-2xl font-semibold text-gray-700 mt-8 mb-4 border-b-2 border-blue-500 pb-2">Nhập từ Excel</h3>
                <div class="mb-4">
                    <label class="block text-gray-700 font-semibold mb-1">Click để tải file mẫu</label>
                </div>
                <button type="button" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition duration-200 mb-4" onclick="downloadExcelTemplate()">Tải file mẫu</button>

                <form method="post" enctype="multipart/form-data" asp-page-handler="ImportExcel">
                    <div class="space-y-6">
                        <div>
                            <label for="excelFile" class="block text-gray-700 font-semibold mb-1">Chọn file Excel để nhập</label>
                            <input type="file" id="excelFile" name="excelFile" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" accept=".xlsx, .xls" required />
                        </div>
                        <div>
                            <label for="imageFiles" class="block text-gray-700 font-semibold mb-1">Chọn các ảnh Incident</label>
                            <input type="file" id="imageFiles" name="imageFiles" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" accept=".png,.jpg,.jpeg" multiple />
                            <small class="text-gray-500">Tải lên tất cả ảnh tương ứng với cột "image_paths" trong Excel (các tên file cách nhau bằng dấu phẩy).</small>
                        </div>
                        <div class="flex justify-center space-x-4 mt-6">
                            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition duration-200 flex items-center">
                                <i class="fas fa-upload mr-2"></i> Upload Excel
                            </button>
                            <a href="/Incidents/Index" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition duration-200 flex items-center">
                                <i class="fas fa-arrow-left mr-2"></i> Quay lại
                            </a>
                        </div>
                    </div>
                </form>
            }
            
        </div>
    </div>

    @section Scripts {
        <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
        <script>
            function downloadExcelTemplate() {
                window.location.href = "/Incidents/IncidentCreate?handler=DownloadExcelTemplate";
            }

            var map;
            var geometryType = document.getElementById('geometryType');
            var coordinatesJsonInput = document.getElementById('coordinatesJson');
            var instructionText = document.getElementById('instructionText');
            var manualLat = document.getElementById('manualLat');
            var manualLng = document.getElementById('manualLng');
            var manualCoords = document.getElementById('manualCoords');
            var pointCoordsGroup = document.querySelectorAll('#pointCoordsGroup');
            var lineCoordsGroup = document.getElementById('lineCoordsGroup');
            var marker;
            var polyline;
            var points = [];
            var currentGeoType = '';
            var allAssets = [];
            var assetLayer;
            var radius = 100;
            var assetCategories = @Html.Raw(Json.Serialize(Model.AssetCategories));

            function loadAllAssets() {
                return fetch('http://localhost:8080/geoserver/wfs?service=WFS&request=GetFeature&typeName=cite:valid_road_assets_layer&outputFormat=application/json')
                    .then(response => {
                        if (!response.ok) throw new Error('Failed to fetch assets');
                        return response.json();
                    })
                    .then(data => {
                        allAssets = data.features || [];
                        console.log("All assets loaded:", allAssets);
                        if (allAssets.length === 0) console.warn("No assets found from GeoServer");
                    })
                    .catch(error => console.error("Error loading assets:", error));
            }

            function findNearbyAssets(latlng) {
                assetLayer.clearLayers();
                var nearbyAssets = [];

                allAssets.forEach(asset => {
                    var assetLatLng = getAssetLatLng(asset);
                    if (assetLatLng) {
                        var distance = map.distance(latlng, assetLatLng);
                        if (distance <= radius) {
                            nearbyAssets.push(asset);
                            var category = assetCategories.find(cat => cat.cagetory_id === asset.properties.category_id);
                            var iconUrl = category ? category.marker_url : "https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png";
                            var marker = L.marker(assetLatLng, {
                                icon: L.icon({
                                    iconUrl: iconUrl,
                                    iconSize: [25, 41],
                                    iconAnchor: [12, 41]
                                })
                            }).addTo(assetLayer);
                            marker.bindPopup(`
                                            <b>Asset ID:</b> ${asset.properties.asset_id}<br>
                                            <b>Loại:</b> ${category ? category.cagetory_name : asset.properties.category_id}<br>
                                            <button class="bg-blue-500 text-white px-2 py-1 rounded mt-2" onclick="selectAsset(${asset.properties.asset_id})">Chọn</button>
                                        `);
                        }
                    }
                });

                console.log("Nearby assets:", nearbyAssets);
                return nearbyAssets;
            }

            function getAssetLatLng(asset) {
                if (asset.geometry.type === "Point") {
                    return L.latLng(asset.geometry.coordinates[1], asset.geometry.coordinates[0]);
                } else if (asset.geometry.type === "LineString") {
                    var coords = asset.geometry.coordinates;
                    var midIndex = Math.floor(coords.length / 2);
                    return L.latLng(coords[midIndex][1], coords[midIndex][0]);
                }
                return null;
            }

            function selectAsset(assetId) {
                document.getElementById('Incident_asset_id').value = assetId;
                console.log("Selected asset ID:", assetId);
                assetLayer.eachLayer(layer => {
                    var popupContent = layer.getPopup().getContent();
                    if (popupContent.includes(`Asset ID: ${assetId}`)) {
                        layer.openPopup();
                    } else {
                        layer.closePopup();
                    }
                });
            }

            function onMapClickPoint(e) {
                var lat = e.latlng.lat;
                var lng = e.latlng.lng;
                if (marker) {
                    marker.setLatLng(e.latlng);
                } else {
                    marker = L.marker(e.latlng).addTo(map);
                }
                var coordinates = [lng, lat];
                coordinatesJsonInput.value = JSON.stringify(coordinates);
                document.getElementById('GeometrySystem').value = 'wgs84';
                manualLat.value = lat;
                manualLng.value = lng;
                findNearbyAssets(e.latlng);
            }

            function onMapClickLine(e) {
                points.push([e.latlng.lat, e.latlng.lng]);
                if (polyline) {
                    polyline.setLatLngs(points);
                } else {
                    polyline = L.polyline(points, { color: 'blue' }).addTo(map);
                }
                var coordinates = points.map(p => [p[1], p[0]]);
                coordinatesJsonInput.value = JSON.stringify(coordinates);
                document.getElementById('GeometrySystem').value = 'wgs84';
                manualCoords.value = JSON.stringify(coordinates);

                var midIndex = Math.floor(points.length / 2);
                var midLatLng = points[midIndex];
                findNearbyAssets(L.latLng(midLatLng[0], midLatLng[1]));
            }

            function finishLineString() {
                if (points.length < 2) {
                    alert('Đường cần ít nhất 2 điểm.');
                    return;
                }
                var coordinates = points.map(p => [p[1], p[0]]);
                coordinatesJsonInput.value = JSON.stringify(coordinates);
                manualCoords.value = JSON.stringify(coordinates);
                map.off('click').off('dblclick');

                var midIndex = Math.floor(points.length / 2);
                var midLatLng = points[midIndex];
                findNearbyAssets(L.latLng(midLatLng[0], midLatLng[1]));
            }

            manualLat.oninput = manualLng.oninput = function () {
                if (currentGeoType === 'Point' && manualLat.value && manualLng.value) {
                    var lat = parseFloat(manualLat.value);
                    var lng = parseFloat(manualLng.value);
                    if (!isNaN(lat) && !isNaN(lng)) {
                        var coordinates = [lng, lat];
                        coordinatesJsonInput.value = JSON.stringify(coordinates);
                        if (marker) {
                            marker.setLatLng([lat, lng]);
                        } else {
                            marker = L.marker([lat, lng]).addTo(map);
                        }
                        map.setView([lat, lng], 13);
                        findNearbyAssets(L.latLng(lat, lng));
                    }
                }
            };

            manualCoords.oninput = function () {
                if (currentGeoType === 'LineString' && manualCoords.value) {
                    try {
                        var coordinates = JSON.parse(manualCoords.value);
                        coordinatesJsonInput.value = JSON.stringify(coordinates);
                        if (polyline) {
                            map.removeLayer(polyline);
                        }
                        points = coordinates.map(c => [c[1], c[0]]);
                        polyline = L.polyline(points, { color: 'blue' }).addTo(map);
                        map.fitBounds(polyline.getBounds());

                        var midIndex = Math.floor(points.length / 2);
                        var midLatLng = points[midIndex];
                        findNearbyAssets(L.latLng(midLatLng[0], midLatLng[1]));
                    } catch (e) {
                        console.error('Invalid LineString JSON:', e);
                    }
                }
            };

            document.querySelector('form').addEventListener('submit', function (e) {
                if (!coordinatesJsonInput.value || !document.getElementById('GeometrySystem').value) {
                    alert('Vui lòng chọn tọa độ và hệ tọa độ trên bản đồ hoặc nhập thủ công!');
                    e.preventDefault();
                }
            });

            document.addEventListener('DOMContentLoaded', function () {
                map = L.map('map').setView([21.0285, 105.8542], 13);
                L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
                    attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>, © <a href="https://carto.com/attributions">CARTO</a>',
                    subdomains: 'abcd',
                }).addTo(map);
                assetLayer = L.layerGroup().addTo(map);

                loadAllAssets().then(() => {
                    geometryType.addEventListener('change', function () {
                        var type = this.value;
                        currentGeoType = type;
                        points = [];
                        if (marker) map.removeLayer(marker);
                        if (polyline) map.removeLayer(polyline);
                        manualLat.value = '';
                        manualLng.value = '';
                        manualCoords.value = '';
                        coordinatesJsonInput.value = '';
                        assetLayer.clearLayers();
                        pointCoordsGroup.forEach(group => group.classList.remove('hidden'));
                        lineCoordsGroup.classList.add('hidden');

                        if (type === 'Point') {
                            instructionText.textContent = 'Nhấp vào bản đồ để chọn điểm hoặc nhập tọa độ thủ công.';
                            pointCoordsGroup.forEach(group => group.classList.remove('hidden'));
                            lineCoordsGroup.classList.add('hidden');
                            map.on('click', onMapClickPoint);
                            map.off('dblclick');
                        } else if (type === 'LineString') {
                            instructionText.textContent = 'Nhấp để thêm điểm cho đường (nhấp đúp để hoàn thành) hoặc nhập tọa độ thủ công.';
                            pointCoordsGroup.forEach(group => group.classList.add('hidden'));
                            lineCoordsGroup.classList.remove('hidden');
                            map.on('click', onMapClickLine);
                            map.on('dblclick', finishLineString);
                        } else {
                            instructionText.textContent = 'Chọn loại hình học để bắt đầu.';
                            pointCoordsGroup.forEach(group => group.classList.add('hidden'));
                            lineCoordsGroup.classList.add('hidden');
                            map.off('click').off('dblclick');
                        }
                    });
                });
            });
        </script>
    }
</body>
</html>