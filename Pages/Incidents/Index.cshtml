@page
@model RoadInfrastructureAssetManagementFrontend2.Pages.Incidents.IndexModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Danh sách Sự cố";
    ViewData["Mapview"] = "Leaflet";
}

<div id="map" class="absolute top-16 left-0 right-0 bottom-0 z-0"></div>

<button class="toggle-filter-btn fixed top-100 left-4 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg hover:bg-blue-700 transition z-20" id="toggleFilterBtn" style="top: 100px !important;">
    <i class="fas fa-filter mr-2"></i> Filters
</button>

<div class="navbar-filter fixed top-0 -left-80 w-80 h-full bg-white bg-opacity-95 p-6 z-50 shadow-lg transition-all duration-300" id="filterNavbar">
    <button class="close-filter-btn absolute top-4 right-4 text-gray-600 hover:text-red-600 transition" id="closeFilterBtn">
        <i class="fas fa-times"></i>
    </button>
    <h4 class="text-gray-800 font-bold mb-6">Filters</h4>
    <div class="mb-4">
        <label class="block text-gray-700 font-semibold mb-2">Search</label>
        <input type="text" id="searchFilter" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter address or route">
    </div>
    <div class="mb-4">
        <label class="block text-gray-700 font-semibold mb-2">Severity Level</label>
        <select id="severityFilter" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="">All Severity Levels</option>
            <option value="low">Low</option>
            <option value="medium">Medium</option>
            <option value="high">High</option>
            <option value="critical">Critical</option>
        </select>
    </div>
    <div class="mb-4">
        <label class="block text-gray-700 font-semibold mb-2">Processing Status</label>
        <select id="statusFilter" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="">All Statuses</option>
            <option value="reported">Reported</option>
            <option value="under review">Under Review</option>
            <option value="resolved">Resolved</option>
            <option value="closed">Closed</option>
        </select>
    </div>
    <div class="incident-count mt-6 p-4 bg-gray-100 rounded-lg text-center font-semibold text-gray-700">
        Total Incidents: <span id="incidentCount">0</span>
    </div>
</div>

<div class="fixed top-20 right-4 z-10 max-w-xs">
    <div class="bg-white bg-opacity-90 p-4 rounded-lg shadow-lg">
        <h1 class="text-xl font-bold text-gray-800 mb-4">Road Incidents Map</h1>
        @if (HttpContext.Session.GetString("Role") == "manager" || HttpContext.Session.GetString("Role") == "inspector")
        {
            <button class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition w-full mb-2" onclick="exportIncidentsReport()">
                <i class="fas fa-file-export mr-2"></i> Xuất báo cáo
            </button>
        }
        <a class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition w-full block text-center" asp-page="/Incidents/IncidentCreate">
            <i class="fas fa-plus mr-2"></i> Thêm sự cố mới
        </a>
    </div>
</div>

<div class="search-message hidden fixed top-24 left-4 bg-white bg-opacity-90 p-4 rounded-lg shadow-lg z-10 text-gray-700" id="searchMessage"></div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script type="text/javascript">
        var map = L.map('map').setView([21.0285, 105.8542], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap"> contributors'
        }).addTo(map);

        var allIncidents = [];
        var markersLayer = L.layerGroup().addTo(map);

        function getCachedData(key, maxAgeInSec = 600) {
            const cached = localStorage.getItem(key);
            if (cached) {
                const { data, timestamp } = JSON.parse(cached);
                const age = (Date.now() - timestamp) / 1000;
                if (age < maxAgeInSec) {
                    return data;
                } else {
                    localStorage.removeItem(key);
                }
            }
            return null;
        }

        function setCachedData(key, data) {
            const cacheEntry = {
                data,
                timestamp: Date.now()
            };
            localStorage.setItem(key, JSON.stringify(cacheEntry));
        }

        function loadIncidentsFromGeoServer(searchKeyword = '') {
            const cacheKey = `geoserver_incidents_${encodeURIComponent(searchKeyword)}`;
            const cachedData = null;

            if (cachedData) {
                allIncidents = cachedData.features.map(feature => ({
                    incident_id: feature.properties.incident_id,
                    address: feature.properties.address,
                    geometry: {
                        type: feature.geometry.type,
                        coordinates: feature.geometry.coordinates
                    },
                    route: feature.properties.route,
                    severity_level: feature.properties.severity_level,
                    damage_level: feature.properties.damage_level,
                    processing_status: feature.properties.processing_status,
                    task_id: feature.properties.task_id,
                    created_at: feature.properties.created_at
                }));
                filterIncidents();
                return Promise.resolve();
            }

            let cqlFilter = '1=1';
            if (searchKeyword) {
                const safeKeyword = searchKeyword.trim().replace(/'/g, "''");
                cqlFilter = `address ILIKE '%${safeKeyword}%' OR route ILIKE '%${safeKeyword}%'`;
            }

            const url = `http://localhost:8080/geoserver/wfs?service=WFS&version=1.0.0&request=GetFeature&typeName=cite:incidents_layer_2&outputFormat=application/json&srsName=EPSG:4326&cql_filter=${encodeURIComponent(cqlFilter)}`;

            return fetch(url)
                .then(response => response.text().then(text => ({ response, text })))
                .then(({ response, text }) => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}, Response: ${text}`);
                    }
                    return JSON.parse(text);
                })
                .then(data => {
                    if (!data.features || !Array.isArray(data.features)) {
                        throw new Error('Invalid GeoServer data: features array is missing or invalid');
                    }
                    allIncidents = data.features.map(feature => {
                        if (!feature.properties) {
                            console.warn('Feature missing properties:', feature);
                            return null;
                        }
                        return {
                            incident_id: feature.properties.incident_id,
                            address: feature.properties.address,
                            geometry: {
                                type: feature.geometry.type,
                                coordinates: feature.geometry.coordinates
                            },
                            route: feature.properties.route,
                            severity_level: feature.properties.severity_level,
                            damage_level: feature.properties.damage_level,
                            processing_status: feature.properties.processing_status,
                            task_id: feature.properties.task_id,
                            created_at: feature.properties.created_at
                        };
                    }).filter(item => item !== null);
                    setCachedData(cacheKey, data);
                    filterIncidents();
                })
                .catch(error => {
                    console.error('Error loading GeoServer data:', error);
                    alert('Không thể tải dữ liệu từ GeoServer: ' + error.message);
                });
        }

        function updateMarkers(incidents) {
            markersLayer.clearLayers();
            var markers = [];

            incidents.forEach(function (incident) {
                if (incident.geometry && incident.geometry.coordinates && incident.geometry.type === "Point") {
                    var coords = incident.geometry.coordinates;
                    var marker = L.marker([coords[1], coords[0]]);

                    var popupContent = `
                                <div class="p-4 max-w-xs font-sans">
                                    <h3 class="text-lg font-semibold text-gray-800 mb-2">Thông tin sự cố</h3>
                                    <table class="w-full text-sm border-collapse">
                                        <tr class="border-b">
                                            <td class="p-2 font-semibold">ID:</td>
                                            <td class="p-2">${incident.incident_id}</td>
                                        </tr>
                                        <tr class="border-b">
                                            <td class="p-2 font-semibold">Địa chỉ:</td>
                                            <td class="p-2">${incident.address || 'N/A'}</td>
                                        </tr>
                                        <tr class="border-b">
                                            <td class="p-2 font-semibold">Tuyến đường:</td>
                                            <td class="p-2">${incident.route || 'N/A'}</td>
                                        </tr>
                                        <tr class="border-b">
                                            <td class="p-2 font-semibold">Mức độ nghiêm trọng:</td>
                                            <td class="p-2">${incident.severity_level}</td>
                                        </tr>
                                        <tr class="border-b">
                                            <td class="p-2 font-semibold">Mức độ thiệt hại:</td>
                                            <td class="p-2">${incident.damage_level}</td>
                                        </tr>
                                        <tr class="border-b">
                                            <td class="p-2 font-semibold">Trạng thái:</td>
                                            <td class="p-2">${incident.processing_status}</td>
                                        </tr>
                                        <tr class="border-b">
                                            <td class="p-2 font-semibold">Task ID:</td>
                                            <td class="p-2">${incident.task_id || 'N/A'}</td>
                                        </tr>
                                        <tr class="border-b">
                                            <td class="p-2 font-semibold">Ngày tạo:</td>
                                            <td class="p-2">${incident.created_at || 'N/A'}</td>
                                        </tr>
                                    </table>
                                    <div class="text-center mt-4">
                                        <button id="update-btn-${incident.incident_id}" class="bg-blue-500 text-white px-4 py-1 rounded-lg hover:bg-blue-600 mr-2">Cập nhật</button>
                                        <button id="detail-btn-${incident.incident_id}" class="bg-blue-500 text-white px-4 py-1 rounded-lg hover:bg-blue-600">Chi tiết</button>
                                    </div>
                                </div>
                            `;

                    marker.bindPopup(popupContent, { autoClose: false }).on('popupopen', function () {
                        document.getElementById('update-btn-' + incident.incident_id).addEventListener('click', function () {
                            window.location.href = '/Incidents/IncidentUpdate/' + incident.incident_id;
                        });
                        document.getElementById('detail-btn-' + incident.incident_id).addEventListener('click', function () {
                            window.location.href = '/Incidents/IncidentDetail/' + incident.incident_id;
                        });
                    });

                    markersLayer.addLayer(marker);
                    markers.push(marker);
                }
            });

            if (markers.length > 0) {
                var group = new L.featureGroup(markers);
                map.fitBounds(group.getBounds(), { padding: [50, 50] });
            } else {
                map.setView([21.0285, 105.8542], 13);
            }
            document.getElementById('incidentCount').textContent = incidents.length;

            const searchKeyword = document.getElementById('searchFilter').value.trim();
            const searchMessage = document.getElementById('searchMessage');
            if (searchKeyword) {
                searchMessage.style.display = 'block';
                if (incidents.length > 0) {
                    searchMessage.textContent = `Tìm thấy ${incidents.length} sự cố khớp với "${searchKeyword}"`;
                } else {
                    searchMessage.textContent = `Không tìm thấy sự cố nào khớp với "${searchKeyword}"`;
                }
            } else {
                searchMessage.style.display = 'none';
            }
        }

        function filterIncidents() {
            var severity = document.getElementById('severityFilter').value;
            var status = document.getElementById('statusFilter').value;

            var filteredIncidents = allIncidents.filter(function (incident) {
                return (!severity || incident.severity_level === severity) &&
                    (!status || incident.processing_status === status);
            });

            updateMarkers(filteredIncidents);
        }

        function toggleFilterNavbar() {
            var navbar = document.getElementById('filterNavbar');
            navbar.classList.toggle('open');
            if (navbar.classList.contains('open')) {
                navbar.style.left = '0';
            } else {
                navbar.style.left = '-20rem';
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const toggleBtn = document.getElementById('toggleFilterBtn');
            const closeBtn = document.getElementById('closeFilterBtn');
            const severityFilter = document.getElementById('severityFilter');
            const statusFilter = document.getElementById('statusFilter');
            const searchInput = document.getElementById('searchFilter');

            if (toggleBtn) {
                toggleBtn.addEventListener('click', toggleFilterNavbar);
            }
            if (closeBtn) {
                closeBtn.addEventListener('click', toggleFilterNavbar);
            }
            if (severityFilter) {
                severityFilter.addEventListener('change', filterIncidents);
            }
            if (statusFilter) {
                statusFilter.addEventListener('change', filterIncidents);
            }
            if (searchInput) {
                let debounceTimeout;
                searchInput.addEventListener('input', function () {
                    clearTimeout(debounceTimeout);
                    debounceTimeout = setTimeout(() => {
                        const searchKeyword = searchInput.value.trim();
                        loadIncidentsFromGeoServer(searchKeyword);
                    }, 500);
                });
            }

            loadIncidentsFromGeoServer();
        });

        function exportIncidentsReport() {
            window.location.href = "/Incidents/Index?handler=ExportExcel";
        }
    </script>
}