@page
@model RoadInfrastructureAssetManagementFrontend2.Pages.Assets.AssetsTableModel
@{
    ViewData["Title"] = "Danh sách kết cấu hạ tầng";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
<script src="https://cdn.tailwindcss.com"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
<style>
    main {
        overflow-y: auto !important;
    }

    body {
        background-color: #f4f6f9;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .table-container {
        overflow-x: auto;
    }

    .pagination-controls button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .pagination-controls button {
        min-width: 32px;
        text-align: center;
        transition: background-color 0.2s;
    }

    .tab-button {
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        border-bottom: 2px solid transparent;
        transition: all 0.2s;
    }

        .tab-button.active {
            border-bottom-color: #3B82F6;
            color: #3B82F6;
            font-weight: 600;
        }

        .tab-button:hover {
            background-color: #F3F4F6;
        }

    #assetStatusChart {
        width: 100% !important;
        height: 400px !important;
    }
</style>

<div class="container mx-auto px-4 py-10 max-w-5xl">
    <h1 class="text-3xl font-bold text-gray-800 mb-6 text-center">Danh sách kết cấu hạ tầng</h1>

    @if (TempData["Error"] != null)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg mb-4" role="alert">
            @TempData["Error"]
        </div>
    }
    @if (TempData["Success"] != null)
    {
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg mb-4" role="alert">
            @TempData["Success"]
        </div>
    }

    <!-- Thanh tab -->
    <div class="flex border-b border-gray-200 mb-6">
        <button class="tab-button active" onclick="showTab('info-tab')">Thông tin</button>
        <button class="tab-button" onclick="showTab('report-tab')">Báo cáo</button>
    </div>

    <!-- Tab Thông tin -->
    <div id="info-tab" class="tab-content">
        <div class="bg-white rounded-lg shadow-lg p-6 table-container">
            <h3 class="text-2xl font-semibold text-gray-700 mb-4 border-b-2 border-blue-500 pb-2 text-center">Danh sách kết cấu hạ tầng</h3>

            <div class="flex flex-col md:flex-row md:items-center mb-4 gap-3">
                <div class="flex w-full md:w-1/2 gap-2">
                    <input type="text" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Tìm kiếm..." id="searchInput">
                    <select class="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" id="searchField">
                        <option value="0">ID kết cấu hạ tầng</option>
                        <option value="1">Tên kết cấu hạ tầng</option>
                        <option value="2">Mã số kết cấu hạ tầng</option>
                        <option value="3">Địa chỉ</option>
                        <option value="4">Trạng thái</option>
                        <option value="5">Ngày tạo</option>
                    </select>
                </div>
                <div class="flex gap-2">
                    @if (HttpContext.Session.GetString("Role") == "admin" || HttpContext.Session.GetString("Role") == "inspector")
                    {
                        <a class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition duration-200 flex items-center" asp-page="/Assets/AssetCreate2">
                            <i class="fas fa-plus mr-2"></i> Tạo kết cấu hạ tầng mới
                        </a>
                    }
                    @if (HttpContext.Session.GetString("Role") == "admin" || HttpContext.Session.GetString("Role") == "inspector" || HttpContext.Session.GetString("Role") == "supervisor")
                    {
                        <button class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition duration-200 flex items-center" onclick="exportAssetsReport()">
                            <i class="fas fa-file-export mr-2"></i> Xuất báo cáo
                        </button>
                    }
                    @* <select id="categorySelect" class="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                        @foreach (var category in Model.assetCagetoriesResponses)
                        {
                            <option value = "@category.category_id">@category.category_name</option>
                        }
                    </select>
                    <button class="bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-600 transition duration-200 flex items-center" onclick="exportAssetsByCategory()">
                        <i class="fas fa-file-export mr-2"></i> Xuất theo danh mục
                    </button> *@
                </div>
            </div>
            <div class="text-sm text-gray-600 mb-2" id="resultCount"></div>
            <div class="overflow-x-auto">
                <table class="w-full text-sm text-left text-gray-700">
                    <thead class="bg-blue-500 text-white">
                        <tr>
                            <th class="px-4 py-3">Mã kết cấu hạ tầng</th>
                            <th class="px-4 py-3">Tên kết cấu hạ tầng</th>
                            <th class="px-4 py-3">Mã số kết cấu hạ tầng</th>
                            <th class="px-4 py-3">Địa chỉ</th>
                            <th class="px-4 py-3">Trạng thái</th>
                            <th class="px-4 py-3">Hình ảnh</th>
                            <th class="px-4 py-3">Hành động</th>
                        </tr>
                    </thead>
                    <tbody id="assetTableBody" class="divide-y divide-gray-200"></tbody>
                </table>
                <div class="pagination-controls mt-4 flex justify-center items-center gap-2">
                    <button id="prevPage" class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed">Trước</button>
                    <div id="pageNumbers" class="flex gap-1"></div>
                    <button id="nextPage" class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed">Sau</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Tab Báo cáo -->
    <div id="report-tab" class="tab-content" style="display: none;">
        <div class="bg-white rounded-lg shadow-lg p-6">
            <h3 class="text-xl font-semibold text-gray-700 mb-4 text-center">Asset Distribution by Status</h3>
            <canvas id="assetStatusChart"></canvas>
        </div>
    </div>
</div>

@Html.AntiForgeryToken()
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>
    console.log('Script loaded');

    let currentPage = 1;
    const pageSize = 10;
    let chartInitialized = false;

    const chartColors = {
        blue: '#3B82F6',
        red: '#EF4444'
    };

    function debounce(func, delay) {
        let timeoutId;
        return function (...args) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => func.apply(this, args), delay);
        };
    }

    function showTab(tabId) {
        document.querySelectorAll('.tab-content').forEach(tab => {
            tab.style.display = 'none';
        });
        document.getElementById(tabId).style.display = 'block';

        document.querySelectorAll('.tab-button').forEach(button => {
            button.classList.remove('active');
        });
        document.querySelector(`.tab-button[onclick="showTab('${tabId}')"]`).classList.add('active');

        if (tabId === 'report-tab' && !chartInitialized) {
            initializeChart();
            chartInitialized = true;
        }
    }

    function initializeChart() {
        Chart.register(ChartDataLabels);

        // Asset Status Report
        var assetStatusData = @Html.Raw(Json.Serialize(Model.AssetStatusReport));
        if (assetStatusData.length === 0) {
            document.getElementById('assetStatusChart').parentElement.innerHTML = '<p class="text-gray-500 text-center">No data available</p>';
        } else {
            new Chart(document.getElementById('assetStatusChart'), {
                type: 'bar',
                data: {
                    labels: assetStatusData.map(item => item.category_name),
                    datasets: [
                        {
                            label: 'In Use',
                            data: assetStatusData.map(item => item.in_use_count),
                            backgroundColor: chartColors.blue,
                            barPercentage: 0.45,
                            categoryPercentage: 0.45
                        },
                        {
                            label: 'Damaged',
                            data: assetStatusData.map(item => item.damaged_count),
                            backgroundColor: chartColors.red,
                            barPercentage: 0.45,
                            categoryPercentage: 0.45
                        }
                    ]
                },
                options: {
                    maintainAspectRatio: false,
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: { display: true, text: 'Count' },
                            ticks: {
                                callback: function (value) {
                                    return value.toLocaleString('en-US');
                                }
                            }
                        },
                        x: { title: { display: true, text: 'Category' } }
                    },
                    plugins: {
                        title: { display: true, text: 'Asset Distribution by Status' },
                        legend: { position: 'top' },
                        datalabels: {
                            anchor: 'end',
                            align: 'top',
                            formatter: function (value) {
                                return value.toLocaleString('en-US');
                            },
                            color: '#1F2937',
                            font: {
                                weight: 'bold',
                                size: 12
                            }
                        }
                    }
                }
            });
        }
    }

    function fetchAssets(currentPage = 1, searchTerm = '', searchField = 0) {
        console.log('fetchAssets called with:', { currentPage, pageSize, searchTerm, searchField });
        const data = { currentPage, pageSize, searchTerm, searchField };
        $.ajax({
            url: '/Assets/AssetsTable?handler=Assets',
            type: 'GET',
            data: data,
            beforeSend: function (xhr) {
                console.log('Request URL:', this.url + '&' + $.param(data));
            },
            success: function (response) {
                console.log('AJAX success:', response);
                if (!response.success) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi',
                        text: response.message,
                        confirmButtonColor: '#3085d6'
                    }).then((result) => {
                        if (response.message.includes("đăng nhập lại")) {
                            window.location.href = "/Users/Login";
                        }
                    });
                    return;
                }
                updateTable(response.assets || []);
                updatePagination(response.totalCount || 0);
                $('#resultCount').text(`Tổng số kết cấu hạ tầng: ${response.totalCount || 0}`);
            },
            error: function (xhr) {
                console.error('AJAX error:', xhr);
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi',
                    text: 'Lỗi khi tải danh sách kết cấu hạ tầng: ' + (xhr.responseJSON?.message || xhr.statusText || 'Lỗi không xác định'),
                    confirmButtonColor: '#3085d6'
                });
            }
        });
    }

    function updateTable(assets) {
        const tbody = $('#assetTableBody');
        tbody.empty();

        if (!assets || assets.length === 0) {
            tbody.append(`
                    <tr>
                        <td colspan="7" class="px-4 py-3 text-center text-gray-500">Không có dữ liệu kết cấu hạ tầng để hiển thị.</td>
                    </tr>
                `);
            return;
        }

        assets.forEach(asset => {
            const allowEditDelete = '@HttpContext.Session.GetString("Role")' === 'inspector' || '@HttpContext.Session.GetString("Role")' === 'admin';
            const row = `
                <tr data-asset-id="${asset.asset_id}" class="hover:bg-gray-50">
                    <td class="px-4 py-3">${asset.asset_id}</td>
                    <td class="px-4 py-3">${asset.asset_name || ''}</td>
                    <td class="px-4 py-3">${asset.asset_code || ''}</td>
                    <td class="px-4 py-3">${asset.address || ''}</td>
                    <td class="px-4 py-3">${asset.asset_status || ''}</td>
                    <td class="px-4 py-3">
                        ${asset.image_url ?
                    `<a href="${asset.image_url}" target="_blank" class="text-blue-600 hover:text-blue-800 transition-colors duration-200">Xem hình ảnh</a>` :
                    `<span class="text-gray-500">Không có hình ảnh</span>`}
                    </td>
                    <td class="px-4 py-3 flex gap-2">
                        <a class="bg-blue-500 text-white px-3 py-1 rounded-lg hover:bg-blue-600 transition duration-200" href="/Assets/AssetsDetail/${asset.asset_id}" title="Chi tiết kết cấu hạ tầng">
                            <i class="fas fa-info-circle"></i>
                        </a>
                        <a class="bg-gray-500 text-white px-3 py-1 rounded-lg hover:bg-gray-600 transition duration-200" href="/MaintenanceHistory/MaintenanceHistorybyAssetId/${asset.asset_id}" title="Lịch sử bảo dưỡng">
                            <i class="fas fa-hammer"></i>
                        </a>
                        ${allowEditDelete ? `
                            <a class="bg-yellow-500 text-white px-3 py-1 rounded-lg hover:bg-yellow-600 transition duration-200" href="/Assets/AssetUpdate?id=${asset.asset_id}" title="Sửa kết cấu hạ tầng">
                                <i class="fas fa-edit"></i>
                            </a>
                            <button class="bg-red-500 text-white px-3 py-1 rounded-lg hover:bg-red-600 transition duration-200 delete-btn" data-id="${asset.asset_id}" title="Xóa kết cấu hạ tầng">
                                <i class="fas fa-trash"></i>
                            </button>
                        ` : ''}
                    </td>
                </tr>`;
            tbody.append(row);
        });
    }

    function updatePagination(totalCount) {
        const totalPages = Math.ceil(totalCount / pageSize);
        const pageNumbers = $('#pageNumbers');
        pageNumbers.empty();

        const maxVisiblePages = 5;
        let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = startPage + maxVisiblePages - 1;

        if (endPage > totalPages) {
            endPage = totalPages;
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        if (startPage > 1) {
            pageNumbers.append(`<button class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300" onclick="currentPage=1;fetchAssets(1, $('#searchInput').val(), $('#searchField').val())">1</button>`);
            if (startPage > 2) pageNumbers.append('<span>...</span>');
        }

        for (let i = startPage; i <= endPage; i++) {
            pageNumbers.append(`<button class="px-3 py-1 ${i === currentPage ? 'bg-blue-500 text-white' : 'bg-gray-200 hover:bg-gray-300'} rounded" onclick="currentPage=${i};fetchAssets(${i}, $('#searchInput').val(), $('#searchField').val())">${i}</button>`);
        }

        if (endPage < totalPages) {
            if (endPage < totalPages - 1) pageNumbers.append('<span>...</span>');
            pageNumbers.append(`<button class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300" onclick="currentPage=${totalPages};fetchAssets(${totalPages}, $('#searchInput').val(), $('#searchField').val())">${totalPages}</button>`);
        }

        $('#prevPage').prop('disabled', currentPage === 1);
        $('#nextPage').prop('disabled', currentPage === totalPages || totalPages === 0);
    }

    $(document).ready(function () {
        console.log('Document ready');
        fetchAssets(1);

        const debouncedSearch = debounce(function (searchTerm, searchField) {
            currentPage = 1;
            fetchAssets(currentPage, searchTerm, searchField);
        }, 500);

        $('#searchInput').on('input', function () {
            debouncedSearch($(this).val(), $('#searchField').val());
        });

        $('#searchField').on('change', function () {
            currentPage = 1;
            fetchAssets(currentPage, $('#searchInput').val(), $(this).val());
        });

        $('#prevPage').on('click', function () {
            if (currentPage > 1) {
                currentPage--;
                fetchAssets(currentPage, $('#searchInput').val(), $('#searchField').val());
            }
        });

        $('#nextPage').on('click', function () {
            const totalPages = Math.ceil($('#resultCount').text().match(/\d+/)?.[0] / pageSize);
            if (currentPage < totalPages) {
                currentPage++;
                fetchAssets(currentPage, $('#searchInput').val(), $('#searchField').val());
            }
        });

        $(document).on('click', '.delete-btn', function () {
            const assetId = $(this).data('id');
            Swal.fire({
                title: 'Xác nhận xóa',
                text: `Bạn có chắc muốn xóa kết cấu hạ tầng ${assetId}?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Xóa',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Assets/AssetsTable?handler=Delete',
                        type: 'POST',
                        data: { id: assetId },
                        headers: {
                            "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function (response) {
                            if (response.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Thành công',
                                    text: 'Xóa kết cấu hạ tầng thành công!',
                                    confirmButtonColor: '#3085d6'
                                }).then(() => {
                                    fetchAssets(currentPage, $('#searchInput').val(), $('#searchField').val());
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Lỗi',
                                    text: response.message,
                                    confirmButtonColor: '#3085d6'
                                });
                            }
                        },
                        error: function (xhr) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Lỗi',
                                text: 'Lỗi khi xóa kết cấu hạ tầng: ' + (xhr.responseJSON?.message || xhr.statusText || 'Lỗi không xác định'),
                                confirmButtonColor: '#3085d6'
                            });
                        }
                    });
                }
            });
        });
    });

    // Thêm hàm mới ngay đây
    window.exportAssetsByCategory = function () {
        const categoryId = $('#categorySelect').val();
        if (categoryId) {
            window.location.href = `/Assets/AssetsTable?handler=ExportAssetsByCategoryId&id=${categoryId}`;
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi',
                text: 'Vui lòng chọn danh mục.',
                confirmButtonColor: '#3085d6'
            });
        }
    };

    window.exportAssetsReport = function () {
        window.location.href = "/Assets/AssetsTable?handler=ExportExcel";
    };
</script>