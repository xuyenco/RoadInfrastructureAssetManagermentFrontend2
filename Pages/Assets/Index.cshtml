@page
@model RoadInfrastructureAssetManagementFrontend2.Pages.Assets.IndexModel

@{
    Layout = "_Layout";
    ViewData["Title"] = "Danh sách Tài sản";
    ViewData["Mapview"] = "Leaflet";
}

<div id="map" class="absolute top-16 left-0 right-0 bottom-0 z-0"></div>

<button class="toggle-filter-btn fixed top-24 left-4 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg hover:bg-blue-700 transition z-10" id="toggleFilterBtn">
    <i class="fas fa-filter mr-2"></i> Filters
</button>

<div class="navbar-filter fixed top-0 -left-80 w-80 h-full bg-white bg-opacity-95 p-6 z-50 shadow-lg transition-all duration-300" id="filterNavbar">
    <button class="close-filter-btn absolute top-4 right-4 text-gray-600 hover:text-red-600 transition" id="closeFilterBtn">
        <i class="fas fa-times"></i>
    </button>
    <h4 class="text-gray-800 font-bold mb-6">Filters</h4>
    <div class="mb-4">
        <label class="block text-gray-700 font-semibold mb-2">Tìm kiếm</label>
        <input type="text" id="searchFilter" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Nhập tên hoặc mã tài sản">
    </div>
    <div class="mb-4">
        <label class="block text-gray-700 font-semibold mb-2">Asset Category</label>
        <select id="categoryFilter" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="">All Categories</option>
            @foreach (var category in Model.AssetCategories)
            {
                <option value="@category.category_id">@category.category_name</option>
            }
        </select>
    </div>
</div>

<div class="fixed top-20 right-4 z-10 max-w-xs">
    <div class="bg-white bg-opacity-90 p-4 rounded-lg shadow-lg">
        <h1 class="text-xl font-bold text-gray-800 mb-4">Danh sách tài sản</h1>
        @if (TempData["Error"] != null)
        {
            <div class="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg">
                @TempData["Error"]
            </div>
        }
        <div class="flex flex-col gap-2">
            <a class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition w-full block text-center" asp-page="/Assets/AssetCreate2">
                <i class="fas fa-plus mr-2"></i> Tạo tài sản mới
            </a>
            @if (HttpContext.Session.GetString("Role") == "manager" || HttpContext.Session.GetString("Role") == "inspector")
            {
                <button class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition w-full mb-2" onclick="exportIncidentsReport()">
                    <i class="fas fa-file-export mr-2"></i> Xuất báo cáo
                </button>
            }
        </div>
    </div>
</div>

<div class="search-message hidden fixed top-32 left-4 bg-white bg-opacity-90 p-4 rounded-lg shadow-lg z-10 text-gray-700" id="searchMessage"></div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script type="text/javascript">
        function toggleFilterNavbar() {
            var navbar = document.getElementById('filterNavbar');
            navbar.classList.toggle('open');
            if (navbar.classList.contains('open')) {
                navbar.style.left = '0';
            } else {
                navbar.style.left = '-20rem';
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const toggleBtn = document.getElementById('toggleFilterBtn');
            const closeBtn = document.getElementById('closeFilterBtn');
            const searchInput = document.getElementById('searchFilter');
            const categoryFilter = document.getElementById('categoryFilter');
            const searchMessage = document.getElementById('searchMessage');

            if (toggleBtn) toggleBtn.addEventListener('click', toggleFilterNavbar);
            if (closeBtn) closeBtn.addEventListener('click', toggleFilterNavbar);

            const map = L.map('map').setView([10.8231, 106.6297], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            const assetCategories = @Html.Raw(Json.Serialize(Model.AssetCategories));
            const defaultIconUrl = 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png';
            const layerConfig = {};
            assetCategories.forEach(category => {
                layerConfig[category.category_id] = {
                    name: category.category_name.toLowerCase().replace(/\s+/g, '_') + '_layer',
                    iconUrl: category.icon_url && category.icon_url.trim() !== '' ? category.icon_url : defaultIconUrl
                };
            });

            const layers = {};
            const markersLayer = L.layerGroup().addTo(map);

            function getCachedData(key, maxAgeInSec = 600) {
                const cached = localStorage.getItem(key);
                if (cached) {
                    const { data, timestamp } = JSON.parse(cached);
                    const age = (Date.now() - timestamp) / 1000;
                    if (age < maxAgeInSec) return data;
                    localStorage.removeItem(key);
                }
                return null;
            }

            function setCachedData(key, data) {
                localStorage.setItem(key, JSON.stringify({ data, timestamp: Date.now() }));
            }

            function createPopupContent(feature) {
                const fixedProperties = {
                    'ID': feature.properties.asset_id,
                    'Tên tài sản': feature.properties.asset_name || 'N/A',
                    'Mã tài sản': feature.properties.asset_code || 'N/A',
                    'Địa chỉ': feature.properties.address || 'N/A',
                    'Năm xây dựng': feature.properties.construction_year ? new Date(feature.properties.construction_year).toLocaleDateString() : 'N/A',
                    'Năm vận hành': feature.properties.operation_year ? new Date(feature.properties.operation_year).toLocaleDateString() : 'N/A',
                    'Diện tích đất': feature.properties.land_area ? `${feature.properties.land_area} m²` : 'N/A',
                    'Diện tích sàn': feature.properties.floor_area ? `${feature.properties.floor_area} m²` : 'N/A',
                    'Giá trị ban đầu': feature.properties.original_value ? `${feature.properties.original_value.toLocaleString()} VNĐ` : 'N/A',
                    'Giá trị còn lại': feature.properties.remaining_value ? `${feature.properties.remaining_value.toLocaleString()} VNĐ` : 'N/A',
                    'Tình trạng': feature.properties.asset_status || 'N/A',
                    'Đơn vị lắp đặt': feature.properties.installation_unit || 'N/A',
                    'Đơn vị quản lý': feature.properties.management_unit || 'N/A'
                };

                let fixedPropertiesContent = '';
                for (const [key, value] of Object.entries(fixedProperties)) {
                    fixedPropertiesContent += `
                                <tr class="border-b">
                                    <td class="p-2 font-semibold">${key}:</td>
                                    <td class="p-2">${value}</td>
                                </tr>
                            `;
                }

                let dynamicAttributesContent = '';
                let attributes = JSON.parse(feature.properties.custom_attributes || '{}');
                for (const [key, value] of Object.entries(attributes)) {
                    const formattedKey = key.replace(/_/g, ' ').replace(/\b\w/g, c => c.toUpperCase());
                    dynamicAttributesContent += `
                                <tr class="border-b">
                                    <td class="p-2 font-semibold text-gray-800">${formattedKey}:</td>
                                    <td class="p-2 text-gray-800">${value || 'N/A'}</td>
                                </tr>
                            `;
                }

                return `
                            <div class="p-4 max-w-xs font-sans text-gray-800">
                                <h3 class="text-lg font-semibold text-gray-800 mb-2">Thông tin tài sản</h3>
                                <table class="w-full text-sm border-collapse">
                                    ${fixedPropertiesContent}
                                    ${dynamicAttributesContent}
                                </table>
                                <div class="text-center mt-4">
                                    <a id="update-btn-${feature.properties.asset_id}" class="bg-blue-500 text-white px-3 py-1 rounded-lg shadow-md hover:bg-blue-600 transition duration-200 mr-2 inline-block" style="color: white !important;">Cập nhật</a>
                                    <a id="maintenance-btn-${feature.properties.asset_id}" class="bg-green-500 text-white px-3 py-1 rounded-lg shadow-md hover:bg-green-600 transition duration-200 inline-block" style="color: white !important;">Lịch sử bảo dưỡng</a>
                                </div>
                            </div>
                        `;
            }

            function loadLayer(categoryId, searchKeyword = '') {
                const config = layerConfig[categoryId];
                if (!config) return Promise.resolve();

                const cacheKey = `geoserver_layer_${categoryId}_${encodeURIComponent(searchKeyword)}`;
                const cachedData = null;

                if (cachedData) {
                    layers[categoryId] = L.geoJSON(cachedData, {
                        pointToLayer: (feature, latlng) => L.marker(latlng, {
                            icon: L.icon({ iconUrl: config.iconUrl, iconSize: [25, 41], iconAnchor: [12, 41], iconErrorUrl: defaultIconUrl })
                        }),
                        style: () => ({ color: '#ff7800', weight: 9, opacity: 0.65 }),
                        onEachFeature: (feature, layer) => {
                            const popupContent = createPopupContent(feature);
                            layer.bindPopup(popupContent);
                            layer.on('popupopen', () => {
                                document.getElementById(`update-btn-${feature.properties.asset_id}`).addEventListener('click', (e) => {
                                    e.preventDefault();
                                    if (confirm('Bạn có muốn cập nhật asset này không?')) {
                                        window.location.href = `/Assets/AssetUpdate?id=${feature.properties.asset_id}`;
                                    }
                                });
                                document.getElementById(`maintenance-btn-${feature.properties.asset_id}`).addEventListener('click', (e) => {
                                    e.preventDefault();
                                    window.location.href = `/MaintenanceHistory/MaintenanceHistorybyAssetId/${feature.properties.asset_id}`;
                                });
                            });
                        }
                    });
                    return Promise.resolve();
                }

                let cqlFilter = `category_id = '${categoryId}'`;
                if (searchKeyword) {
                    const safeKeyword = searchKeyword.trim().replace(/'/g, "''");
                    cqlFilter += ` AND (asset_name ILIKE '%${safeKeyword}%' OR asset_code ILIKE '%${safeKeyword}%')`;
                }

                const wfsUrl = `http://localhost:8080/geoserver/wfs?service=WFS&request=GetFeature&typeName=cite:assets_layer_2&outputFormat=application/json&srsName=EPSG:4326&cql_filter=${encodeURIComponent(cqlFilter)}`;

                return fetch(wfsUrl)
                    .then(response => {
                        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                        return response.json();
                    })
                    .then(data => {
                        if (data.features && data.features.length > 0) {
                            setCachedData(cacheKey, data);
                            layers[categoryId] = L.geoJSON(data, {
                                pointToLayer: (feature, latlng) => L.marker(latlng, {
                                    icon: L.icon({ iconUrl: config.iconUrl, iconSize: [25, 41], iconAnchor: [12, 41], iconErrorUrl: defaultIconUrl })
                                }),
                                style: () => ({ color: '#ff7800', weight: 9, opacity: 0.65 }),
                                onEachFeature: (feature, layer) => {
                                    const popupContent = createPopupContent(feature);
                                    layer.bindPopup(popupContent);
                                    layer.on('popupopen', () => {
                                        document.getElementById(`update-btn-${feature.properties.asset_id}`).addEventListener('click', (e) => {
                                            e.preventDefault();
                                            if (confirm('Bạn có muốn cập nhật asset này không?')) {
                                                window.location.href = `/Assets/AssetUpdate?id=${feature.properties.asset_id}`;
                                            }
                                        });
                                        document.getElementById(`maintenance-btn-${feature.properties.asset_id}`).addEventListener('click', (e) => {
                                            e.preventDefault();
                                            window.location.href = `/MaintenanceHistory/MaintenanceHistorybyAssetId/${feature.properties.asset_id}`;
                                        });
                                    });
                                }
                            });
                        } else {
                            layers[categoryId] = null;
                        }
                    })
                    .catch(error => {
                        console.error(`Error fetching layer for category ${categoryId}:`, error);
                        layers[categoryId] = null;
                    });
            }

            function loadAllLayers(searchKeyword = '') {
                Promise.all(Object.keys(layerConfig).map(categoryId => loadLayer(categoryId, searchKeyword)))
                    .then(() => updateMarkers())
                    .catch(error => console.error('Error loading layers:', error));
            }

            function updateMarkers() {
                markersLayer.clearLayers();
                const category = categoryFilter.value;
                const searchKeyword = searchInput.value.trim();
                let totalFeatures = 0;

                if (!category) {
                    Object.keys(layers).forEach(categoryId => {
                        if (layers[categoryId]) {
                            layers[categoryId].addTo(markersLayer);
                            totalFeatures += layers[categoryId].getLayers().length;
                        }
                    });
                } else {
                    if (layers[category]) {
                        layers[category].addTo(markersLayer);
                        totalFeatures += layers[category].getLayers().length;
                    }
                }

                if (searchKeyword) {
                    searchMessage.style.display = 'block';
                    searchMessage.textContent = totalFeatures > 0
                        ? `Tìm thấy ${totalFeatures} tài sản khớp với "${searchKeyword}"`
                        : `Không tìm thấy tài sản nào khớp với "${searchKeyword}"`;
                } else {
                    searchMessage.style.display = 'none';
                }

                if (markersLayer.getLayers().length > 0) {
                    const group = L.featureGroup(markersLayer.getLayers());
                    const bounds = group.getBounds();
                    if (bounds.isValid()) {
                        map.fitBounds(bounds, { padding: [50, 50] });
                    } else {
                        map.setView([10.8231, 106.6297], 13);
                    }
                } else {
                    map.setView([10.8231, 106.6297], 13);
                }
            }

            let debounceTimeout;
            searchInput.addEventListener('input', function () {
                clearTimeout(debounceTimeout);
                debounceTimeout = setTimeout(() => {
                    loadAllLayers(searchInput.value.trim());
                }, 500);
            });

            categoryFilter.addEventListener('change', updateMarkers);

            loadAllLayers();

            window.exportTasksReport = function () {
                window.location.href = "/Assets/Index?handler=ExportExcel";
            };
        });
    </script>
}