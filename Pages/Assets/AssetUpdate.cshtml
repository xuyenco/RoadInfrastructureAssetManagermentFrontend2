@page
@model RoadInfrastructureAssetManagementFrontend.Pages.Assets.AssetUpdateModel
@{
    ViewData["Title"] = "Cập nhật Asset";
}

<head>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <style>
        #map { height: 400px; width: 100%; margin-bottom: 15px; }
    </style>
</head>

<h1>Cập nhật Asset</h1>

@if (Model.AssetResponse == null)
{
    <p class="text-danger">Không tìm thấy asset để cập nhật.</p>
}
else
{
    <form method="post">
        <div class="form-group mb-3">
            <label class="form-label">ID</label>
            <input class="form-control" value="@Model.AssetResponse.asset_id" disabled />
            <input type="hidden" asp-for="AssetId" />
        </div>

        <div class="form-group mb-3">
            <label asp-for="AssetRequest.cagetory_id" class="form-label">Category ID</label>
            <input asp-for="AssetRequest.cagetory_id" class="form-control" type="number" min="1" readonly />
            <span asp-validation-for="AssetRequest.cagetory_id" class="text-danger"></span>
        </div>

        <!-- Attributes động -->
        <h2>Thuộc tính</h2>
        @if (Model.AssetResponse.attributes != null && Model.AssetResponse.attributes.Any())
        {
            @foreach (var attr in Model.AssetResponse.attributes)
            {
                <div class="form-group mb-3">
                    <label class="form-label">@attr.Key</label>
                    <input name="AssetRequest.attributes[@attr.Key]" value="@attr.Value" class="form-control" type="text" />
                </div>
            }
        }
        else
        {
            <p class="text-muted">Không có thuộc tính nào để hiển thị.</p>
        }

        <div class="form-group mb-3">
            <label asp-for="AssetRequest.lifecycle_stage" class="form-label">Giai đoạn vòng đời</label>
            <input asp-for="AssetRequest.lifecycle_stage" class="form-control" type="text" />
            <span asp-validation-for="AssetRequest.lifecycle_stage" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="AssetRequest.installation_date" class="form-label">Ngày lắp đặt</label>
            <input asp-for="AssetRequest.installation_date" class="form-control" type="date" />
            <span asp-validation-for="AssetRequest.installation_date" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="AssetRequest.expected_lifetime" class="form-label">Tuổi thọ dự kiến</label>
            <input asp-for="AssetRequest.expected_lifetime" class="form-control" type="number" min="1" />
            <span asp-validation-for="AssetRequest.expected_lifetime" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="AssetRequest.condition" class="form-label">Tình trạng</label>
            <input asp-for="AssetRequest.condition" class="form-control" type="text" />
            <span asp-validation-for="AssetRequest.condition" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="AssetRequest.last_inspection_date" class="form-label">Ngày kiểm tra cuối</label>
            <input asp-for="AssetRequest.last_inspection_date" class="form-control" type="date" />
            <span asp-validation-for="AssetRequest.last_inspection_date" class="text-danger"></span>
        </div>

        <!-- Bản đồ và nhập tọa độ thủ công -->
        <h2>Vị trí (@Model.AssetResponse.geometry.type)</h2>
        <div id="map"></div>
        <div id="coordinatesInput" class="mt-3">
            <p id="instructionText"></p>
            <div id="manualCoordinates">
                <div class="form-group">
                    <label for="geometrySystem">Hệ thống tọa độ</label>
                    <select id="geometrySystem" class="form-control" required>
                        <option value="wgs84">WGS84</option>
                        <option value="vn2000">VN2000</option>
                    </select>
                </div>
                <div class="form-group" id="pointInputs">
                    <label for="manualLat">Vĩ độ (Latitude):</label>
                    <input type="number" step="any" id="manualLat" class="form-control" placeholder="Nhập vĩ độ" />
                </div>
                <div class="form-group" id="pointInputsLng">
                    <label for="manualLng">Kinh độ (Longitude):</label>
                    <input type="number" step="any" id="manualLng" class="form-control" placeholder="Nhập kinh độ" />
                </div>
                <div class="form-group" id="multiCoordsGroup" style="display: none;">
                    <label for="manualCoords">Tọa độ (dạng JSON):</label>
                    <textarea id="manualCoords" class="form-control" rows="3" placeholder='Ví dụ: [[x1, y1], [x2, y2]]'></textarea>
                </div>
            </div>
        </div>
        <input type="hidden" id="geometryType" asp-for="AssetRequest.geometry.type" />
        <input type="hidden" id="geometryCoordinates" asp-for="AssetRequest.geometry.coordinates" />
        <input type="hidden" id="geometrySystemHidden" name="GeometrySystem" />

        <div class="mt-3">
            <button type="button" id="resetButton" class="btn btn-secondary">Reset về tọa độ gốc</button>
            <button type="submit" class="btn btn-success">
                <i class="fas fa-save"></i> Cập nhật
            </button>
        </div>
    </form>
}

@section Scripts {
    @if (Model.AssetResponse != null)
    {
        <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
        <partial name="_ValidationScriptsPartial" />
        <script>
            var originalGeometryVN2000 = @Html.Raw(Json.Serialize(Model.AssetResponse.geometry)); // Tọa độ gốc từ backend (VN2000)
            var originalGeometryWGS84 = @Html.Raw(Json.Serialize(CoordinateConverter.ConvertGeometryToWGS84(Model.AssetResponse.geometry))); // Tọa độ WGS84
            var currentGeometryWGS84 = JSON.parse(JSON.stringify(originalGeometryWGS84));
            var currentCoordinates = JSON.parse(JSON.stringify(originalGeometryWGS84.coordinates));
            var map = L.map('map').setView(getInitialCenter(), 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
            var layer;
            var selectedCoordinates = [];

            // Khởi tạo dựa trên loại hình học
            initializeForm();

            function initializeForm() {
                var geoType = currentGeometryWGS84.type.toLowerCase();
                var instructionText = document.getElementById('instructionText');
                var pointInputs = document.getElementById('pointInputs');
                var pointInputsLng = document.getElementById('pointInputsLng');
                var multiCoordsGroup = document.getElementById('multiCoordsGroup');

                map.off('click').off('dblclick');
                selectedCoordinates = [];

                if (geoType === 'point') {
                    instructionText.textContent = 'Click trên bản đồ để chọn một điểm hoặc nhập tọa độ thủ công bên dưới.';
                    pointInputs.style.display = 'block';
                    pointInputsLng.style.display = 'block';
                    multiCoordsGroup.style.display = 'none';
                    map.on('click', onMapClickPoint);
                } else if (geoType === 'linestring') {
                    instructionText.textContent = 'Click trên bản đồ để thêm điểm vào đường (double-click để kết thúc) hoặc nhập tọa độ thủ công bên dưới.';
                    pointInputs.style.display = 'none';
                    pointInputsLng.style.display = 'none';
                    multiCoordsGroup.style.display = 'block';
                    map.on('click', onMapClickLine);
                    map.on('dblclick', finishLineString);
                } else if (geoType === 'polygon') {
                    instructionText.textContent = 'Click trên bản đồ để thêm điểm vào đa giác (double-click để kết thúc) hoặc nhập tọa độ thủ công bên dưới.';
                    pointInputs.style.display = 'none';
                    pointInputsLng.style.display = 'none';
                    multiCoordsGroup.style.display = 'block';
                    map.on('click', onMapClickPolygon);
                    map.on('dblclick', finishPolygon);
                }

                initializeLayer();
                updateInputs();
            }

            function getInitialCenter() {
                if (currentGeometryWGS84.type === 'Point') {
                    return [currentGeometryWGS84.coordinates[1], currentGeometryWGS84.coordinates[0]];
                } else if (currentGeometryWGS84.type === 'LineString') {
                    return [currentGeometryWGS84.coordinates[0][1], currentGeometryWGS84.coordinates[0][0]];
                } else if (currentGeometryWGS84.type === 'Polygon') {
                    return [currentGeometryWGS84.coordinates[0][0][1], currentGeometryWGS84.coordinates[0][0][0]];
                }
            }

            function initializeLayer() {
                if (layer) map.removeLayer(layer);
                if (currentGeometryWGS84.type === 'Point') {
                    layer = L.marker([currentGeometryWGS84.coordinates[1], currentGeometryWGS84.coordinates[0]]).addTo(map);
                } else if (currentGeometryWGS84.type === 'LineString') {
                    layer = L.polyline(currentGeometryWGS84.coordinates.map(c => [c[1], c[0]]), { color: 'blue' }).addTo(map);
                } else if (currentGeometryWGS84.type === 'Polygon') {
                    layer = L.polygon(currentGeometryWGS84.coordinates[0].map(c => [c[1], c[0]]), { color: 'blue' }).addTo(map);
                }
                updateHiddenInputs();
            }

            function updateLayer() {
                if (layer) map.removeLayer(layer);
                if (currentGeometryWGS84.type === 'Point') {
                    layer = L.marker([currentGeometryWGS84.coordinates[1], currentGeometryWGS84.coordinates[0]]).addTo(map);
                } else if (currentGeometryWGS84.type === 'LineString') {
                    layer = L.polyline(selectedCoordinates.length > 0 ? selectedCoordinates.map(c => [c[1], c[0]]) : currentGeometryWGS84.coordinates.map(c => [c[1], c[0]]), { color: 'blue' }).addTo(map);
                } else if (currentGeometryWGS84.type === 'Polygon') {
                    layer = L.polygon(selectedCoordinates.length > 0 ? [selectedCoordinates.map(c => [c[1], c[0]])] : currentGeometryWGS84.coordinates[0].map(c => [c[1], c[0]]), { color: 'blue' }).addTo(map);
                }
                updateHiddenInputs();
            }

            function updateInputs() {
                var system = document.getElementById('geometrySystem').value;
                var geoType = currentGeometryWGS84.type.toLowerCase();
                if (geoType === 'point') {
                    var coords = system === 'wgs84' ? currentGeometryWGS84.coordinates : originalGeometryVN2000.coordinates;
                    document.getElementById('manualLat').value = coords[1];
                    document.getElementById('manualLng').value = coords[0];
                } else {
                    var coords = system === 'wgs84' ? currentGeometryWGS84.coordinates : originalGeometryVN2000.coordinates;
                    document.getElementById('manualCoords').value = JSON.stringify(coords);
                }
            }

            function updateHiddenInputs() {
                var system = document.getElementById('geometrySystem').value;
                document.getElementById('geometryType').value = currentGeometryWGS84.type;
                document.getElementById('geometryCoordinates').value = JSON.stringify(currentCoordinates);
                document.getElementById('geometrySystemHidden').value = system;
            }

            function onMapClickPoint(e) {
                currentGeometryWGS84 = { type: 'Point', coordinates: [e.latlng.lng, e.latlng.lat] };
                currentCoordinates = currentGeometryWGS84.coordinates;
                updateLayer();
                updateInputs();
            }

            function onMapClickLine(e) {
                selectedCoordinates.push([e.latlng.lng, e.latlng.lat]);
                updateLayer();
            }

            function finishLineString() {
                if (selectedCoordinates.length < 2) {
                    alert('LineString cần ít nhất 2 điểm.');
                    return;
                }
                currentGeometryWGS84 = { type: 'LineString', coordinates: selectedCoordinates };
                currentCoordinates = currentGeometryWGS84.coordinates;
                selectedCoordinates = [];
                updateLayer();
                updateInputs();
                map.off('click').off('dblclick');
            }

            function onMapClickPolygon(e) {
                selectedCoordinates.push([e.latlng.lng, e.latlng.lat]);
                updateLayer();
            }

            function finishPolygon() {
                if (selectedCoordinates.length < 3) {
                    alert('Polygon cần ít nhất 3 điểm.');
                    return;
                }
                selectedCoordinates.push(selectedCoordinates[0]); // Đóng vòng
                currentGeometryWGS84 = { type: 'Polygon', coordinates: [selectedCoordinates] };
                currentCoordinates = currentGeometryWGS84.coordinates;
                selectedCoordinates = [];
                updateLayer();
                updateInputs();
                map.off('click').off('dblclick');
            }

            document.getElementById('geometrySystem').addEventListener('change', function () {
                updateInputs();
            });

            document.getElementById('manualLat').addEventListener('input', onManualInputChange);
            document.getElementById('manualLng').addEventListener('input', onManualInputChange);
            document.getElementById('manualCoords').addEventListener('input', onManualInputChange);

            function onManualInputChange() {
                var geoType = currentGeometryWGS84.type.toLowerCase();
                var system = document.getElementById('geometrySystem').value;

                if (geoType === 'point') {
                    var lat = parseFloat(document.getElementById('manualLat').value);
                    var lng = parseFloat(document.getElementById('manualLng').value);
                    if (!isNaN(lat) && !isNaN(lng)) {
                        currentCoordinates = [lng, lat];
                        if (system === 'wgs84') {
                            currentGeometryWGS84 = { type: 'Point', coordinates: currentCoordinates };
                        }
                        updateLayer();
                        updateInputs();
                    }
                } else {
                    try {
                        var coords = JSON.parse(document.getElementById('manualCoords').value);
                        currentCoordinates = coords;
                        if (system === 'wgs84') {
                            currentGeometryWGS84 = { type: geoType === 'linestring' ? 'LineString' : 'Polygon', coordinates: coords };
                        }
                        updateLayer();
                        updateInputs();
                    } catch (e) {
                        console.error('Invalid coordinates JSON:', e);
                    }
                }
            }

            document.getElementById('resetButton').addEventListener('click', function () {
                currentGeometryWGS84 = JSON.parse(JSON.stringify(originalGeometryWGS84));
                currentCoordinates = JSON.parse(JSON.stringify(originalGeometryWGS84.coordinates));
                selectedCoordinates = [];
                initializeForm();
            });
        </script>
    }
}