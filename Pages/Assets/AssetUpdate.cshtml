@page
@using System.Text.Json
@model RoadInfrastructureAssetManagementFrontend2.Pages.Assets.AssetUpdateModel
@{
    ViewData["Title"] = "Cập nhật Asset";
}

<head>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        main {
            overflow-y: auto !important; /* Ghi đè overflow: hidden từ site.css */
        }

        #map {
            height: 400px;
            width: 100%;
            margin-bottom: 15px;
            border-radius: 0.5rem;
            border: 1px solid #e5e7eb;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #1f2937;
            border-bottom: 2px solid #3b82f6;
            padding-bottom: 0.5rem;
            margin-bottom: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            font-weight: 500;
            color: #374151;
            margin-bottom: 0.5rem;
            display: block;
        }

        .form-input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
            outline: none;
            transition: all 0.2s;
        }

            .form-input:focus {
                border-color: #3b82f6;
                ring: 2px;
                ring-color: #3b82f6;
            }

            .form-input:disabled {
                background-color: #f3f4f6;
                cursor: not-allowed;
            }

        .error-message {
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
    </style>
</head>

<div class="container mx-auto px-4 py-10 max-w-5xl">
    <h1 class="text-3xl font-bold text-gray-800 mb-8 text-center">Cập nhật Asset</h1>

    @if (Model.AssetResponse == null)
    {
        <p class="text-red-500 bg-red-50 p-4 rounded-lg text-center">Không tìm thấy asset để cập nhật.</p>
    }
    else
    {
        <div class="bg-white rounded-lg shadow-lg p-8">
            <form method="post" enctype="multipart/form-data">
                <!-- ID -->
                <div class="form-group">
                    <label class="form-label">ID</label>
                    <input class="form-input bg-gray-100 cursor-not-allowed" value="@Model.AssetResponse.asset_id" disabled />
                    <input type="hidden" asp-for="AssetId" />
                </div>

                <!-- Thông Tin Cơ Bản -->
                <h2 class="section-title">Thông Tin Cơ Bản</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="form-group">
                        <label asp-for="AssetRequest.asset_name" class="form-label">Tên tài sản</label>
                        <input asp-for="AssetRequest.asset_name" class="form-input" required />
                        <span asp-validation-for="AssetRequest.asset_name" class="error-message"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="AssetRequest.asset_code" class="form-label">Mã tài sản</label>
                        <input asp-for="AssetRequest.asset_code" class="form-input" required />
                        <span asp-validation-for="AssetRequest.asset_code" class="error-message"></span>
                    </div>
                    <div class="form-group md:col-span-2">
                        <label asp-for="AssetRequest.address" class="form-label">Địa chỉ</label>
                        <input asp-for="AssetRequest.address" class="form-input" required />
                        <span asp-validation-for="AssetRequest.address" class="error-message"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="AssetRequest.construction_year" class="form-label">Năm xây dựng</label>
                        <input asp-for="AssetRequest.construction_year" type="date" class="form-input" />
                    </div>
                    <div class="form-group">
                        <label asp-for="AssetRequest.operation_year" class="form-label">Năm vận hành</label>
                        <input asp-for="AssetRequest.operation_year" type="date" class="form-input" />
                    </div>
                    <div class="form-group">
                        <label asp-for="AssetRequest.land_area" class="form-label">Diện tích đất (m²)</label>
                        <input asp-for="AssetRequest.land_area" type="number" step="0.01" class="form-input" />
                    </div>
                    <div class="form-group">
                        <label asp-for="AssetRequest.floor_area" class="form-label">Diện tích sàn (m²)</label>
                        <input asp-for="AssetRequest.floor_area" type="number" step="0.01" class="form-input" />
                    </div>
                    <div class="form-group">
                        <label asp-for="AssetRequest.original_value" class="form-label">Giá trị ban đầu (VNĐ)</label>
                        <input asp-for="AssetRequest.original_value" type="number" step="0.01" class="form-input" />
                    </div>
                    <div class="form-group">
                        <label asp-for="AssetRequest.remaining_value" class="form-label">Giá trị còn lại (VNĐ)</label>
                        <input asp-for="AssetRequest.remaining_value" type="number" step="0.01" class="form-input" />
                    </div>
                    <div class="form-group">
                        <label asp-for="AssetRequest.asset_status" class="form-label">Tình trạng tài sản</label>
                        <input asp-for="AssetRequest.asset_status" class="form-input" />
                    </div>
                    <div class="form-group">
                        <label asp-for="AssetRequest.installation_unit" class="form-label">Đơn vị lắp đặt</label>
                        <input asp-for="AssetRequest.installation_unit" class="form-input" />
                    </div>
                    <div class="form-group">
                        <label asp-for="AssetRequest.management_unit" class="form-label">Đơn vị quản lý</label>
                        <input asp-for="AssetRequest.management_unit" class="form-input" />
                    </div>
                    <div class="form-group md:col-span-2">
                        <label for="image" class="form-label">Hình ảnh</label>
                        <input type="file" id="image" name="AssetRequest.image" class="form-input file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" accept="image/*" />
                    </div>
                </div>

                <!-- Chọn Danh Mục -->
                <h2 class="section-title mt-8">Chọn Danh Mục</h2>
                <div class="form-group">
                    <label asp-for="AssetRequest.category_id" class="form-label">Danh mục</label>
                    <select asp-for="AssetRequest.category_id" class="form-input" onchange="selectCategory(this.value)" required>
                        @foreach (var category in Model.Categories)
                        {
                            <option value="@category.category_id">@category.category_name</option>
                        }
                    </select>
                    <span asp-validation-for="AssetRequest.category_id" class="error-message"></span>
                </div>
                <div id="geoTypeDisplay" class="form-group">
                    <label class="form-label">Loại Hình Học</label>
                    <input type="text" id="geoType" class="form-input bg-gray-100 cursor-not-allowed" value="@Model.AssetResponse.geometry?.type" readonly />
                </div>

                <!-- Thuộc Tính Động -->
                <h2 class="section-title mt-8">Thuộc Tính</h2>
                <div id="attributes-content" class="p-4 bg-gray-50 rounded-lg">
                    <p>Đang tải thuộc tính...</p>
                </div>

                <!-- Bản đồ và nhập tọa độ thủ công -->
                <h2 class="section-title mt-8">Vị trí (@Model.AssetResponse.geometry?.type)</h2>
                <div id="map" class="shadow-sm"></div>
                <div id="coordinatesInput" class="mt-4">
                    <p id="instructionText" class="text-gray-600 mb-4"></p>
                    <div id="manualCoordinates" class="space-y-4">
                        <div class="form-group">
                            <label for="geometrySystem" class="form-label">Hệ thống tọa độ</label>
                            <select id="geometrySystem" name="GeometrySystem" class="form-input" required>
                                <option value="">Chọn hệ tọa độ</option>
                                <option value="wgs84">WGS84</option>
                                <option value="vn2000">VN2000</option>
                            </select>
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="form-group" id="pointInputs">
                                <label for="manualLat" class="form-label">Vĩ độ (Latitude):</label>
                                <input type="number" step="any" id="manualLat" class="form-input" placeholder="Nhập vĩ độ" />
                            </div>
                            <div class="form-group" id="pointInputsLng">
                                <label for="manualLng" class="form-label">Kinh độ (Longitude):</label>
                                <input type="number" step="any" id="manualLng" class="form-input" placeholder="Nhập kinh độ" />
                            </div>
                        </div>
                        <div class="form-group" id="multiCoordsGroup" style="display: none;">
                            <label for="manualCoords" class="form-label">Tọa độ (dạng JSON):</label>
                            <textarea id="manualCoords" class="form-input" rows="4" placeholder='Ví dụ: [[x1, y1], [x2, y2]]'></textarea>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="geometryHidden" name="AssetRequest.geometry" />
                <input type="hidden" id="customAttributesHidden" asp-for="AssetRequest.custom_attributes" />

                <!-- Nút điều khiển -->
                <div class="mt-8 flex justify-end space-x-4">
                    <button type="button" id="resetButton" class="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition duration-200 flex items-center">
                        <i class="fas fa-undo mr-2"></i> Reset về tọa độ gốc
                    </button>
                    <button type="submit" class="px-6 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition duration-200 flex items-center">
                        <i class="fas fa-save mr-2"></i> Cập nhật
                    </button>
                </div>
            </form>
        </div>
    }
</div>

@section Scripts {
    @if (Model.AssetResponse != null)
    {
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
        <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
        <partial name="_ValidationScriptsPartial" />
        <script>
            let map, currentLayer, coordinates = [];
            let selectedCategoryId = @Model.AssetResponse.category_id;
            let currentCenter = [21.0285, 105.8542];
            let currentZoom = 13;
            let currentGeoType = '@Model.AssetResponse.geometry.type'.toLowerCase();
            let assetId = @Model.AssetId;

            // Dữ liệu tọa độ gốc
            var originalGeometryVN2000 = @Html.Raw(JsonSerializer.Serialize(Model.AssetResponse.geometry)); // VN2000
            var originalGeometryWGS84 = @Html.Raw(JsonSerializer.Serialize(CoordinateConverter.ConvertGeometryToWGS84(Model.AssetResponse.geometry))); // WGS84
            var currentGeometryWGS84 = JSON.parse(JSON.stringify(originalGeometryWGS84));
            var currentCoordinates = JSON.parse(JSON.stringify(originalGeometryWGS84.coordinates));

            // Khởi tạo bản đồ
            document.addEventListener('DOMContentLoaded', function () {
                try {
                    map = L.map('map', {
                        center: getInitialCenter(),
                        zoom: currentZoom,
                        zoomControl: true
                    });

                    L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
                            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>, © <a href="https://carto.com/attributions">CARTO</a>',
                            subdomains: 'abcd',
                        }).addTo(map);

                    const geocoder = L.Control.Geocoder.nominatim();
                    L.Control.geocoder({ geocoder: geocoder }).addTo(map);

                    map.on('moveend zoomend', function () {
                        currentCenter = map.getCenter();
                        currentZoom = map.getZoom();
                    });

                    // Khởi tạo form và layer
                    initializeForm();
                    loadAttributes(selectedCategoryId);
                } catch (error) {
                    console.error('Error initializing map:', error);
                }
            });

            function getInitialCenter() {
                if (currentGeometryWGS84.type === 'Point') {
                    return [currentGeometryWGS84.coordinates[1], currentGeometryWGS84.coordinates[0]];
                } else if (currentGeometryWGS84.type === 'LineString') {
                    return [currentGeometryWGS84.coordinates[0][1], currentGeometryWGS84.coordinates[0][0]];
                } else if (currentGeometryWGS84.type === 'Polygon') {
                    return [currentGeometryWGS84.coordinates[0][0][1], currentGeometryWGS84.coordinates[0][0][0]];
                }
            }

            function initializeForm() {
                var instructionText = document.getElementById('instructionText');
                var pointInputs = document.getElementById('pointInputs');
                var pointInputsLng = document.getElementById('pointInputsLng');
                var multiCoordsGroup = document.getElementById('multiCoordsGroup');

                map.off('click').off('dblclick');
                coordinates = [];

                if (currentGeoType === 'point') {
                    instructionText.textContent = 'Click trên bản đồ để chọn một điểm hoặc nhập tọa độ thủ công bên dưới.';
                    pointInputs.style.display = 'block';
                    pointInputsLng.style.display = 'block';
                    multiCoordsGroup.style.display = 'none';
                    map.on('click', onMapClickPoint);
                    document.getElementById('manualLat').value = currentGeometryWGS84.coordinates[1];
                    document.getElementById('manualLng').value = currentGeometryWGS84.coordinates[0];
                } else if (currentGeoType === 'linestring') {
                    instructionText.textContent = 'Click trên bản đồ để thêm điểm vào đường (double-click để kết thúc) hoặc nhập tọa độ thủ công bên dưới.';
                    pointInputs.style.display = 'none';
                    pointInputsLng.style.display = 'none';
                    multiCoordsGroup.style.display = 'block';
                    map.on('click', onMapClickLine);
                    map.on('dblclick', finishLineString);
                    document.getElementById('manualCoords').value = JSON.stringify(currentGeometryWGS84.coordinates);
                } else if (currentGeoType === 'polygon') {
                    instructionText.textContent = 'Click trên bản đồ để thêm điểm vào đa giác (double-click để kết thúc) hoặc nhập tọa độ thủ công bên dưới.';
                    pointInputs.style.display = 'none';
                    pointInputsLng.style.display = 'none';
                    multiCoordsGroup.style.display = 'block';
                    map.on('click', onMapClickPolygon);
                    map.on('dblclick', finishPolygon);
                    document.getElementById('manualCoords').value = JSON.stringify(currentGeometryWGS84.coordinates[0]);
                }

                initializeLayer();
                document.getElementById('geometrySystem').value = 'wgs84';
            }

            function initializeLayer() {
                if (currentLayer) map.removeLayer(currentLayer);
                if (currentGeoType === 'point') {
                    currentLayer = L.marker([currentGeometryWGS84.coordinates[1], currentGeometryWGS84.coordinates[0]]).addTo(map);
                    // Không đặt isPointSelected = true ở đây
                } else if (currentGeoType === 'linestring') {
                    currentLayer = L.polyline(currentGeometryWGS84.coordinates.map(c => [c[1], c[0]]), { color: 'blue' }).addTo(map);
                } else if (currentGeoType === 'polygon') {
                    currentLayer = L.polygon(currentGeometryWGS84.coordinates[0].map(c => [c[1], c[0]]), { color: 'blue' }).addTo(map);
                }
                updateGeometry(currentGeometryWGS84.type, currentGeometryWGS84.coordinates);
            }

            function selectCategory(id) {
                selectedCategoryId = id;
                $.ajax({
                    url: '/Assets/AssetUpdate?handler=GetCategorySchema',
                    data: { id: id, assetId: assetId },
                    method: 'GET',
                    success: function (response) {
                        let geoType = response.geometryType || 'Point';
                        if (geoType.toLowerCase() === 'line') geoType = 'LineString';
                        currentGeoType = geoType.toLowerCase();
                        $('#geoType').val(currentGeoType);
                        $('#geoTypeDisplay').show();
                        initializeForm();
                        loadAttributes(id);
                    },
                    error: function (xhr, status, error) {
                        console.error('AJAX error:', error);
                        currentGeoType = 'point';
                        $('#geoType').val(currentGeoType);
                        $('#geoTypeDisplay').show();
                        initializeForm();
                        loadAttributes(id);
                    }
                });
            }

            function loadAttributes(id) {
                $.ajax({
                    url: '/Assets/AssetUpdate?handler=GetCategorySchema',
                    data: { id: id, assetId: assetId },
                    method: 'GET',
                    success: function (data) {
                        $('#attributes-content').html(data.html);
                        $('#attributes-content .attribute-input').on('change', updateAttributes);
                    },
                    error: function (xhr, status, error) {
                        console.error('AJAX error loading attributes:', error);
                        $('#attributes-content').html('<p>Đã xảy ra lỗi khi tải thuộc tính.</p>');
                    }
                });
            }

            function updateAttributes() {
                const attributes = {};
                $('#attributes-content .attribute-input').each(function () {
                    attributes[$(this).attr('id')] = $(this).val() || '';
                });
                $('#customAttributesHidden').val(JSON.stringify(attributes));
            }

            function onMapClickPoint(e) {
                if (!e || !e.latlng) {
                    console.error('Invalid click event or latlng:', e);
                    return;
                }

                if (currentLayer) {
                    map.removeLayer(currentLayer);
                }
                coordinates = [e.latlng.lng, e.latlng.lat];
                currentLayer = L.marker([e.latlng.lat, e.latlng.lng]).addTo(map);
                document.getElementById('manualLat').value = e.latlng.lat;
                document.getElementById('manualLng').value = e.latlng.lng;
                document.getElementById('geometrySystem').value = 'wgs84';
                updateGeometry('Point', coordinates);

                const geocoder = L.Control.Geocoder.nominatim();
                geocoder.reverse(e.latlng, map.options.crs.scale(map.getZoom()), function (results) {
                    if (results.length > 0) {
                        $('#AssetRequest_address').val(results[0].name);
                        updateAttributes();
                    }
                });
            }

            function onMapClickLine(e) {
                if (!e || !e.latlng) {
                    console.error('Invalid click event or latlng:', e);
                    return;
                }

                coordinates.push([e.latlng.lng, e.latlng.lat]);
                if (currentLayer) {
                    map.removeLayer(currentLayer);
                }
                currentLayer = L.polyline(coordinates.map(coord => [coord[1], c[0]]), { color: 'blue' }).addTo(map);
                document.getElementById('manualCoords').value = JSON.stringify(coordinates);
                document.getElementById('geometrySystem').value = 'wgs84';
                updateGeometry('LineString', coordinates);
            }

            function finishLineString() {
                if (coordinates.length < 2) {
                    alert('A LineString requires at least 2 points.');
                    return;
                }
                if (currentLayer) {
                    map.removeLayer(currentLayer);
                }
                currentLayer = L.polyline(coordinates.map(coord => [coord[1], c[0]]), { color: 'blue' }).addTo(map);
                document.getElementById('manualCoords').value = JSON.stringify(coordinates);
                updateGeometry('LineString', coordinates);
                map.off('click').off('dblclick');
            }

            function onMapClickPolygon(e) {
                if (!e || !e.latlng) {
                    console.error('Invalid click event or latlng:', e);
                    return;
                }

                coordinates.push([e.latlng.lng, e.latlng.lat]);
                if (currentLayer) {
                    map.removeLayer(currentLayer);
                }
                currentLayer = L.polygon(coordinates.map(coord => [coord[1], c[0]]), { color: 'blue' }).addTo(map);
                document.getElementById('manualCoords').value = JSON.stringify(coordinates);
                document.getElementById('geometrySystem').value = 'wgs84';
                updateGeometry('Polygon', [coordinates]);
            }

            function finishPolygon() {
                if (coordinates.length < 3) {
                    alert('A Polygon requires at least 3 points.');
                    return;
                }
                coordinates.push(coordinates[0]);
                if (currentLayer) {
                    map.removeLayer(currentLayer);
                }
                currentLayer = L.polygon(coordinates.map(coord => [coord[1], c[0]]), { color: 'blue' }).addTo(map);
                document.getElementById('manualCoords').value = JSON.stringify(coordinates);
                updateGeometry('Polygon', [coordinates]);
                map.off('click').off('dblclick');
            }

            function updateGeometry(type, coords) {
                const geometryHiddenField = document.getElementById('geometryHidden');
                if (geometryHiddenField) {
                    const geometryObj = { type: type, coordinates: coords };
                    geometryHiddenField.value = JSON.stringify(geometryObj);
                    console.log('Geometry updated:', geometryObj);
                } else {
                    console.error('Geometry field not found');
                }
            }

            document.getElementById('manualLat').addEventListener('input', onManualInputChange);
            document.getElementById('manualLng').addEventListener('input', onManualInputChange);
            document.getElementById('manualCoords').addEventListener('input', onManualInputChange);

            function onManualInputChange() {
                if (currentGeoType === 'point') {
                    var lat = parseFloat(document.getElementById('manualLat').value);
                    var lng = parseFloat(document.getElementById('manualLng').value);
                    if (!isNaN(lat) && !isNaN(lng)) {
                        coordinates = [lng, lat];
                        updateGeometry('Point', coordinates);
                        updateMapFromManualInput();
                    }
                } else {
                    try {
                        coordinates = JSON.parse(document.getElementById('manualCoords').value);
                        updateGeometry(currentGeoType === 'linestring' ? 'LineString' : 'Polygon',
                            currentGeoType === 'polygon' ? [coordinates] : coordinates);
                        updateMapFromManualInput();
                    } catch (e) {
                        console.error('Invalid coordinates JSON:', e);
                    }
                }
            }

            function updateMapFromManualInput() {
                if (currentLayer) {
                    map.removeLayer(currentLayer);
                }

                if (currentGeoType === 'point' && coordinates.length === 2) {
                    const [lng, lat] = coordinates;
                    currentLayer = L.marker([lat, lng]).addTo(map);
                    map.setView([lat, lng], currentZoom);
                } else if (currentGeoType === 'linestring' && coordinates.length >= 1) {
                    currentLayer = L.polyline(coordinates.map(coord => [coord[1], c[0]]), { color: 'blue' }).addTo(map);
                    map.fitBounds(currentLayer.getBounds());
                } else if (currentGeoType === 'polygon' && coordinates[0].length >= 3) {
                    currentLayer = L.polygon(coordinates[0].map(coord => [coord[1], c[0]]), { color: 'blue' }).addTo(map);
                    map.fitBounds(currentLayer.getBounds());
                }
            }

            document.getElementById('resetButton').addEventListener('click', function () {
                currentGeometryWGS84 = JSON.parse(JSON.stringify(originalGeometryWGS84));
                currentCoordinates = JSON.parse(JSON.stringify(originalGeometryWGS84.coordinates));
                coordinates = [];
                initializeForm();
            });

            // Intercept form submission to ensure geometry is sent as raw JSON
            $('#assetForm').on('submit', function (e) {
                const geometryHiddenField = document.getElementById('geometryHidden');
                if (geometryHiddenField && geometryHiddenField.value) {
                    try {
                        const geometryObj = JSON.parse(geometryHiddenField.value);
                        geometryHiddenField.value = JSON.stringify(geometryObj, null, 0);
                    } catch (error) {
                        console.error('Error parsing geometry JSON:', error);
                        alert('Định dạng hình học không hợp lệ.');
                        e.preventDefault();
                    }
                }
            });
        </script>
    }
}