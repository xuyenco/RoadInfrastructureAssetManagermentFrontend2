@page
@model RoadInfrastructureAssetManagementFrontend2.Pages.Assets.AssetCreate2Model

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tạo Tài Sản Mới</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        main {
            overflow-y: auto !important; /* Ghi đè overflow: hidden từ site.css */
        }

        .container {
            padding: 20px;
        }

        .tab-content {
            margin-top: 20px;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        #map {
            height: 400px;
            width: 100%;
            margin-top: 20px;
            position: relative;
            z-index: 1;
        }

        .nav-tabs .nav-link {
            border-radius: 0;
        }

        .category-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .tab-pane {
            min-height: 500px;
        }

        .section-title {
            margin-top: 20px;
            margin-bottom: 10px;
            font-size: 1.5em;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Tạo Tài Sản Mới</h1>
        <ul class="nav nav-tabs" id="assetCreateTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="info-tab" data-bs-toggle="tab" data-bs-target="#info" type="button" role="tab">Thông Tin Tài Sản</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="attributes-tab" data-bs-toggle="tab" data-bs-target="#attributes" type="button" role="tab" disabled>Thuộc Tính</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="review-tab" data-bs-toggle="tab" data-bs-target="#review" type="button" role="tab" disabled>Kiểm Tra Lại</button>
            </li>
        </ul>

        <form method="post" id="assetForm" enctype="multipart/form-data">
            <div class="tab-content" id="assetCreateTabContent">
                <!-- Tab 1: Thông Tin Tài Sản -->
                <div class="tab-pane fade show active" id="info" role="tabpanel">
                    <!-- Phần Chọn Danh Mục -->
                    <div class="section-title">Chọn Danh Mục</div>
                    <div class="category-list">
                        @foreach (var category in Model.Categories)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="NewAsset.category_id" id="category_@category.category_id" value="@category.category_id" onchange="selectCategory(this.value)">
                                <label class="form-check-label" for="category_@category.category_id">
                                    @category.category_name
                                </label>
                            </div>
                        }
                    </div>
                    <div id="geoTypeDisplay" class="form-group mt-3" style="display: none;">
                        <label>Loại Hình Học</label>
                        <input type="text" id="geoType" class="form-control" readonly />
                    </div>

                    <!-- Phần Thông Tin Cơ Bản -->
                    <div class="section-title">Thông Tin Cơ Bản</div>
                    <div class="form-group">
                        <label asp-for="NewAsset.asset_name">Tên tài sản</label>
                        <input asp-for="NewAsset.asset_name" class="form-control" required />
                        <span asp-validation-for="NewAsset.asset_name" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.asset_code">Mã tài sản</label>
                        <input asp-for="NewAsset.asset_code" class="form-control" required />
                        <span asp-validation-for="NewAsset.asset_code" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.address">Địa chỉ</label>
                        <input asp-for="NewAsset.address" class="form-control" required />
                        <span asp-validation-for="NewAsset.address" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.construction_year">Năm xây dựng</label>
                        <input asp-for="NewAsset.construction_year" type="date" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.operation_year">Năm vận hành</label>
                        <input asp-for="NewAsset.operation_year" type="date" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.land_area">Diện tích đất (m²)</label>
                        <input asp-for="NewAsset.land_area" type="number" step="0.01" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.floor_area">Diện tích sàn (m²)</label>
                        <input asp-for="NewAsset.floor_area" type="number" step="0.01" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.original_value">Giá trị ban đầu (VNĐ)</label>
                        <input asp-for="NewAsset.original_value" type="number" step="0.01" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.remaining_value">Giá trị còn lại (VNĐ)</label>
                        <input asp-for="NewAsset.remaining_value" type="number" step="0.01" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.asset_status">Tình trạng tài sản</label>
                        <input asp-for="NewAsset.asset_status" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.installation_unit">Đơn vị lắp đặt</label>
                        <input asp-for="NewAsset.installation_unit" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.management_unit">Đơn vị quản lý</label>
                        <input asp-for="NewAsset.management_unit" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="image">Hình ảnh</label>
                        <input type="file" id="image" name="NewAsset.image" class="form-control" accept="image/*" />
                    </div>

                    <!-- Phần Vị Trí -->
                    <div class="section-title">Vị Trí</div>
                    <div id="map"></div>
                    <div id="coordinatesInput">
                        <p id="instructionText">Click on the map to select a point.</p>
                        <div id="manualCoordinates" class="mt-3">
                            <div class="form-group">
                                <label asp-for="GeometrySystem">Hệ thống tọa độ</label>
                                <select asp-for="GeometrySystem" class="form-control" id="geometrySystem" required>
                                    <option value="">Chọn hệ tọa độ</option>
                                    <option value="wgs84">WGS84</option>
                                    <option value="vn2000">VN2000</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="manualLat">Vĩ độ (Latitude):</label>
                                <input type="text" id="manualLat" class="form-control" placeholder="Nhập vĩ độ" />
                            </div>
                            <div class="form-group">
                                <label for="manualLng">Kinh độ (Longitude):</label>
                                <input type="text" id="manualLng" class="form-control" placeholder="Nhập kinh độ" />
                            </div>
                            <div class="form-group" id="manualCoordsGroup" style="display: none;">
                                <label for="manualCoords">Tọa độ (dạng JSON):</label>
                                <textarea id="manualCoords" class="form-control" rows="3" placeholder='Ví dụ: [[x1, y1], [x2,y2]]'></textarea>
                            </div>
                        </div>
                    </div>
                    <input type="hidden" id="geometryHidden" name="NewAsset.geometry" />
                    <button type="button" class="btn btn-primary mt-3" onclick="nextTab('attributes-tab')">Tiếp Theo</button>

                </div>

                <!-- Tab 2: Thuộc Tính -->
                <div class="tab-pane fade" id="attributes" role="tabpanel">
                    <div id="attributes-content">
                        <p>Đang tải thuộc tính...</p>
                    </div>
                    <button type="button" class="btn btn-secondary mt-3 me-2" onclick="prevTab('info-tab')">Quay Lại</button>
                    <button type="button" class="btn btn-primary mt-3" onclick="nextTab('review-tab')">Tiếp Theo</button>
                </div>

                <!-- Tab 3: Kiểm Tra Lại -->
                <div class="tab-pane fade" id="review" role="tabpanel">
                    <h4>Tóm tắt thông tin</h4>
                    <div id="review-content"></div>
                    <button type="button" class="btn btn-secondary mt-3 me-2" onclick="prevTab('attributes-tab')">Quay Lại</button>
                    <button type="submit" class="btn btn-success mt-3">Tạo Tài Sản</button>
                </div>
            </div>
            <input type="hidden" id="customAttributesHidden" asp-for="NewAsset.custom_attributes" />
        </form>
    </div>

 <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <script>
        let map, currentLayer, coordinates = [];
        let selectedCategoryId = null;
        let currentCenter = [21.0285, 105.8542];
        let currentZoom = 13;
        let isPointSelected = false;
        let currentGeoType = 'point'; // Giá trị mặc định

        // Khởi tạo bản đồ
        document.addEventListener('DOMContentLoaded', function () {
            try {
                map = L.map('map', {
                    center: currentCenter,
                    zoom: currentZoom,
                    zoomControl: true
                });

                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '© OpenStreetMap contributors'
                }).addTo(map);

                const geocoder = L.Control.Geocoder.nominatim();
                L.Control.geocoder({ geocoder: geocoder }).addTo(map);

                map.on('moveend zoomend', function () {
                    currentCenter = map.getCenter();
                    currentZoom = map.getZoom();
                });
            } catch (error) {
                console.error('Error initializing map:', error);
            }
        });

        $(document).ready(function () {
            $('#assetCreateTabs a[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) {
                if (e.target.id === 'info-tab') {
                    setTimeout(function () {
                        map.invalidateSize();
                        map.setView(currentCenter, currentZoom);
                    }, 100);
                }
                if (e.target.id === 'review-tab') {
                    updateReview();
                }
            });

            // Intercept form submission to ensure geometry is sent as raw JSON
            $('#assetForm').on('submit', function (e) {
                const geometryHiddenField = document.getElementById('geometryHidden');
                if (geometryHiddenField && geometryHiddenField.value) {
                    try {
                        // Parse and re-stringify to ensure clean JSON
                        const geometryObj = JSON.parse(geometryHiddenField.value);
                        geometryHiddenField.value = JSON.stringify(geometryObj, null, 0); // No extra formatting
                    } catch (error) {
                        console.error('Error parsing geometry JSON:', error);
                        alert('Định dạng hình học không hợp lệ.');
                        e.preventDefault(); // Prevent form submission if geometry is invalid
                    }
                }
            });
        });

        function selectCategory(id) {
            selectedCategoryId = id;
            $('#attributes-tab').prop('disabled', false);
            $.ajax({
                url: '/Assets/AssetCreate2?handler=GetCategorySchema',
                data: { id: id },
                method: 'GET',
                success: function (response) {
                    let geoType = response.geometryType || 'Point';
                    if (geoType.toLowerCase() === 'line') geoType = 'LineString';
                    currentGeoType = geoType.toLowerCase();
                    $('#geoType').val(currentGeoType);
                    $('#geoTypeDisplay').show();
                    updateForm();
                },
                error: function (xhr, status, error) {
                    console.error('AJAX error:', error);
                    currentGeoType = 'point';
                    $('#geoType').val(currentGeoType);
                    $('#geoTypeDisplay').show();
                    updateForm();
                }
            });
        }

        function loadAttributes(id) {
            $.ajax({
                url: '/Assets/AssetCreate2?handler=GetCategorySchema',
                data: { id: id },
                method: 'GET',
                success: function (data) {
                    $('#attributes-content').html(data.html);
                    $('#attributes-content .attribute-input').on('change', updateAttributes);
                },
                error: function (xhr, status, error) {
                    console.error('AJAX error loading attributes:', error);
                    $('#attributes-content').html('<p>Đã xảy ra lỗi khi tải thuộc tính.</p>');
                }
            });
        }

        function updateForm() {
            const coordinatesInput = document.getElementById('coordinatesInput');
            const instructionText = document.getElementById('instructionText');
            const manualLat = document.getElementById('manualLat');
            const manualLng = document.getElementById('manualLng');
            const manualCoordsGroup = document.getElementById('manualCoordsGroup');
            const manualCoords = document.getElementById('manualCoords');

            if (!coordinatesInput) {
                console.error('coordinatesInput element not found');
                return;
            }

            coordinates = [];
            if (currentLayer) {
                map.removeLayer(currentLayer);
                currentLayer = null;
            }

            map.off('click').off('dblclick');
            isPointSelected = false;

            // Reset các ô input
            manualLat.value = '';
            manualLng.value = '';
            manualCoords.value = '';

            if (currentGeoType === 'point') {
                instructionText.textContent = 'Click on the map to select a point or enter coordinates manually below.';
                manualCoordsGroup.style.display = 'none';
                manualLat.parentElement.style.display = 'block';
                manualLng.parentElement.style.display = 'block';
                map.on('click', onMapClickPoint);
            } else if (currentGeoType === 'linestring') {
                instructionText.textContent = 'Click on the map to add points to the line (double-click to finish) or enter coordinates manually below.';
                manualCoordsGroup.style.display = 'block';
                manualLat.parentElement.style.display = 'none';
                manualLng.parentElement.style.display = 'none';
                map.on('click', onMapClickLine);
                map.on('dblclick', finishLineString);
            } else if (currentGeoType === 'polygon') {
                instructionText.textContent = 'Click on the map to add points to the polygon (double-click to finish) or enter coordinates manually below.';
                manualCoordsGroup.style.display = 'block';
                manualLat.parentElement.style.display = 'none';
                manualLng.parentElement.style.display = 'none';
                map.on('click', onMapClickPolygon);
                map.on('dblclick', finishPolygon);
            }

            // Lắng nghe thay đổi thủ công từ người dùng và cập nhật bản đồ
            manualLat.oninput = manualLng.oninput = function () {
                if (currentGeoType === 'point' && manualLat.value && manualLng.value) {
                    const lat = parseFloat(manualLat.value);
                    const lng = parseFloat(manualLng.value);
                    if (!isNaN(lat) && !isNaN(lng)) {
                        coordinates = [lng, lat];
                        updateGeometry('Point', coordinates);
                        updateMapFromManualInput();
                    }
                }
            };
            manualCoords.oninput = function () {
                if (currentGeoType !== 'point' && manualCoords.value) {
                    try {
                        coordinates = JSON.parse(manualCoords.value);
                        updateGeometry(currentGeoType === 'linestring' ? 'LineString' : 'Polygon',
                            currentGeoType === 'polygon' ? [coordinates] : coordinates);
                        updateMapFromManualInput();
                    } catch (e) {
                        console.error('Invalid coordinates JSON:', e);
                    }
                }
            };
        }

        function onMapClickPoint(e) {
            if (isPointSelected) {
                console.log('Point already selected, ignoring click');
                return;
            }

            if (!e || !e.latlng) {
                console.error('Invalid click event or latlng:', e);
                return;
            }

            if (currentLayer) {
                map.removeLayer(currentLayer);
            }
            coordinates = [e.latlng.lng, e.latlng.lat];
            currentLayer = L.marker([e.latlng.lat, e.latlng.lng]).addTo(map);
            document.getElementById('manualLat').value = e.latlng.lat;
            document.getElementById('manualLng').value = e.latlng.lng;
            document.getElementById('geometrySystem').value = 'wgs84';
            updateGeometry('Point', coordinates);
            isPointSelected = true;

            const geocoder = L.Control.Geocoder.nominatim();
            geocoder.reverse(e.latlng, map.options.crs.scale(map.getZoom()), function (results) {
                if (results.length > 0) {
                    $('#dia_chi').val(results[0].name);
                    updateAttributes();
                }
            });
        }

        function onMapClickLine(e) {
            if (!e || !e.latlng) {
                console.error('Invalid click event or latlng:', e);
                return;
            }

            coordinates.push([e.latlng.lng, e.latlng.lat]);
            if (currentLayer) {
                map.removeLayer(currentLayer);
            }
            currentLayer = L.polyline(coordinates.map(coord => [coord[1], coord[0]]), { color: 'blue' }).addTo(map);
            document.getElementById('manualCoords').value = JSON.stringify(coordinates);
            document.getElementById('geometrySystem').value = 'wgs84';
            updateGeometry('LineString', coordinates);
        }

        function finishLineString() {
            if (coordinates.length < 2) {
                alert('A LineString requires at least 2 points.');
                return;
            }
            if (currentLayer) {
                map.removeLayer(currentLayer);
            }
            currentLayer = L.polyline(coordinates.map(coord => [coord[1], coord[0]]), { color: 'blue' }).addTo(map);
            document.getElementById('manualCoords').value = JSON.stringify(coordinates);
            updateGeometry('LineString', coordinates);
            map.off('click').off('dblclick');
        }

        function onMapClickPolygon(e) {
            if (!e || !e.latlng) {
                console.error('Invalid click event or latlng:', e);
                return;
            }

            coordinates.push([e.latlng.lng, e.latlng.lat]);
            if (currentLayer) {
                map.removeLayer(currentLayer);
            }
            currentLayer = L.polygon(coordinates.map(coord => [coord[1], coord[0]]), { color: 'blue' }).addTo(map);
            document.getElementById('manualCoords').value = JSON.stringify(coordinates);
            document.getElementById('geometrySystem').value = 'wgs84';
            updateGeometry('Polygon', [coordinates]);
        }

        function finishPolygon() {
            if (coordinates.length < 3) {
                alert('A Polygon requires at least 3 points.');
                return;
            }
            coordinates.push(coordinates[0]);
            if (currentLayer) {
                map.removeLayer(currentLayer);
            }
            currentLayer = L.polygon(coordinates.map(coord => [coord[1], coord[0]]), { color: 'blue' }).addTo(map);
            document.getElementById('manualCoords').value = JSON.stringify(coordinates);
            updateGeometry('Polygon', [coordinates]);
            map.off('click').off('dblclick');
        }

        function updateMapFromManualInput() {
            console.log('now we change point on map');
            if (currentLayer) {
                map.removeLayer(currentLayer);
            }

            if (currentGeoType === 'point' && coordinates.length === 2) {
                const [lng, lat] = coordinates;
                currentLayer = L.marker([lat, lng]).addTo(map);
                map.setView([lat, lng], currentZoom);
                isPointSelected = true;
            } else if (currentGeoType === 'linestring' && coordinates.length >= 1) {
                currentLayer = L.polyline(coordinates.map(coord => [coord[1], coord[0]]), { color: 'blue' }).addTo(map);
                map.fitBounds(currentLayer.getBounds());
            } else if (currentGeoType === 'polygon' && coordinates[0].length >= 3) {
                currentLayer = L.polygon(coordinates[0].map(coord => [coord[1], coord[0]]), { color: 'blue' }).addTo(map);
                map.fitBounds(currentLayer.getBounds());
            }
        }

        function updateGeometry(type, coords) {
            const geometryHiddenField = document.getElementById('geometryHidden');
            if (geometryHiddenField) {
                // Store raw JSON object instead of stringified JSON
                const geometryObj = { type: type, coordinates: coords };
                geometryHiddenField.value = JSON.stringify(geometryObj); // Ensure single stringify
                console.log('Geometry updated:', geometryObj);
            } else {
                console.error('Geometry field not found');
            }
            updateReview();
        }

        function updateAttributes() {
            const attributes = {};
            $('#attributes-content .attribute-input').each(function () {
                attributes[$(this).attr('id')] = $(this).val() || '';
            });
            $('#customAttributesHidden').val(JSON.stringify(attributes));
            updateReview();
        }

        function nextTab(tabId) {
            const currentTab = $('.nav-link.active').attr('id');
            if (validateTab(currentTab)) {
                $(`#${tabId}`).prop('disabled', false).tab('show');
                if (tabId === 'attributes-tab' && selectedCategoryId) {
                    loadAttributes(selectedCategoryId);
                }
            }
        }

        function prevTab(tabId) {
            $(`#${tabId}`).tab('show');
        }

        function validateTab(tabId) {
            if (tabId === 'info-tab') {
                if (!selectedCategoryId) {
                    alert('Vui lòng chọn một danh mục.');
                    return false;
                }
                const requiredFields = $('#info .form-control[required]');
                let valid = true;
                requiredFields.each(function () {
                    if (!$(this).val()) {
                        $(this).next('.text-danger').text('Trường này là bắt buộc.');
                        valid = false;
                    } else {
                        $(this).next('.text-danger').text('');
                    }
                });
                if (!coordinates.length) {
                    alert('Vui lòng chọn vị trí trên bản đồ hoặc nhập tọa độ thủ công.');
                    return false;
                }
                return true;
            }
            return true;
        }

        function updateReview() {
            let reviewHtml = '<h5>Thông Tin Cơ Bản</h5><ul>';
            $('#assetForm').serializeArray().forEach(function (field) {
                if (field.name.startsWith('NewAsset.') && field.name !== 'NewAsset.geometry' && field.name !== 'NewAsset.custom_attributes') {
                    reviewHtml += `<li><strong>${field.name.replace('NewAsset.', '')}:</strong> ${field.value || 'Chưa nhập'}</li>`;
                }
            });
            reviewHtml += '</ul><h5>Thuộc Tính Động</h5><ul>';
            const attributes = JSON.parse($('#customAttributesHidden').val() || '{}');
            for (let key in attributes) {
                reviewHtml += `<li><strong>${key}:</strong> ${attributes[key] || 'Chưa nhập'}</li>`;
            }
            reviewHtml += '</ul><h5>Tọa Độ</h5><ul>';
            const geometry = JSON.parse($('#geometryHidden').val() || '{}');
            if (geometry.coordinates) {
                reviewHtml += `<li><strong>Tọa độ:</strong> ${JSON.stringify(geometry.coordinates)}</li>`;
            }
            reviewHtml += '</ul>';
            $('#review-content').html(reviewHtml);
        }
    </script>
</body>
</html>