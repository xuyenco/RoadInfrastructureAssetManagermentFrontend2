@page
@model RoadInfrastructureAssetManagementFrontend2.Pages.Assets.AssetCreate2Model

@{
    Layout = "_Layout";
    ViewData["Title"] = "Danh sách Nhiệm vụ";
    ViewData["Mapview"] = "Leaflet";
}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tạo Kết Cấu Hạ Tầng Mới</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        .container {
            max-width: 100%;
            margin-left: auto;
            margin-right: auto;
            padding-left: 16px;
            padding-right: 16px;
        }

        @@media (min-width: 640px) {
            .container {
                max-width: 640px;
            }
        }

        @@media (min-width: 768px) {
            .container {
                max-width: 768px;
            }
        }

        @@media (min-width: 1024px) {
            .container {
                max-width: 1024px;
            }
        }

        @@media (min-width: 1280px) {
            .container {
                max-width: 1504px;
            }
        }

        .asset-create-container {
            overflow-y: auto;
        }

        main {
            overflow-y: auto !important; /* Ghi đè overflow: hidden từ site.css */
        }

        .container {
            padding: 20px;
        }

        .tab-content {
            margin-top: 20px;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        #map {
            height: 400px;
            width: 100%;
            margin-top: 20px;
            position: relative;
            z-index: 1;
        }

        .nav-tabs .nav-link {
            border-radius: 0;
        }

        .category-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .tab-pane {
            min-height: 500px;
        }

        .section-title {
            margin-top: 20px;
            margin-bottom: 10px;
            font-size: 1.5em;
            font-weight: bold;
        }

        .import-button-container {
            margin: 20px 16px;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .text-danger {
            display: block;
            margin-top: 0.25rem;
            font-size: 0.875rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Tạo Kết Cấu Hạ Tầng Mới</h1>
        <div class="import-button-container">
            <button type="button" class="btn btn-primary" onclick="window.location.href='/Assets/AssetImport'">Nhập kết cấu hạ tầng bằng excel</button>
        </div>
        <ul class="nav nav-tabs" id="assetCreateTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="info-tab" data-bs-toggle="tab" data-bs-target="#info" type="button" role="tab">Thông Tin Kết Cấu</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="attributes-tab" data-bs-toggle="tab" data-bs-target="#attributes" type="button" role="tab" disabled>Thuộc Tính</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="review-tab" data-bs-toggle="tab" data-bs-target="#review" type="button" role="tab" disabled>Kiểm Tra Lại</button>
            </li>
        </ul>

        <form method="post" id="assetForm" enctype="multipart/form-data" novalidate>
            <div class="tab-content" id="assetCreateTabContent">
                <!-- Tab 1: Thông Tin Kết Cấu Hạ Tầng -->
                <div class="tab-pane fade show active" id="info" role="tabpanel">
                    <!-- Phần Chọn Danh Mục -->
                    <div class="section-title">Chọn Danh Mục</div>
                    <div class="category-list">
                        @foreach (var category in Model.Categories)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="NewAsset.category_id" id="category_@category.category_id" value="@category.category_id" onchange="selectCategory(this.value)">
                                <label class="form-check-label" for="category_@category.category_id">
                                    @category.category_name
                                </label>
                            </div>
                        }
                    </div>
                    <div id="geoTypeDisplay" class="form-group mt-3" style="display: none;">
                        <label>Loại Hình Học</label>
                        <input type="text" id="geoType" class="form-control" readonly />
                    </div>

                    <!-- Phần Thông Tin Cơ Bản -->
                    <div class="section-title">Thông Tin Cơ Bản</div>
                    <div class="form-group">
                        <label asp-for="NewAsset.asset_name">Tên kết cấu hạ tầng</label>
                        <input asp-for="NewAsset.asset_name" class="form-control" required />
                        <span asp-validation-for="NewAsset.asset_name" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.asset_code">Mã kết cấu hạ tầng</label>
                        <input asp-for="NewAsset.asset_code" class="form-control" required />
                        <span asp-validation-for="NewAsset.asset_code" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.address">Địa chỉ</label>
                        <input asp-for="NewAsset.address" class="form-control" required />
                        <span asp-validation-for="NewAsset.address" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.construction_year">Năm xây dựng</label>
                        <input asp-for="NewAsset.construction_year" type="date" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.operation_year">Năm vận hành</label>
                        <input asp-for="NewAsset.operation_year" type="date" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.land_area">Diện tích đất (m²)</label>
                        <input asp-for="NewAsset.land_area" type="number" step="0.01" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.floor_area">Diện tích sàn (m²)</label>
                        <input asp-for="NewAsset.floor_area" type="number" step="0.01" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.original_value">Giá trị ban đầu (VNĐ)</label>
                        <input asp-for="NewAsset.original_value" type="number" step="0.01" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.remaining_value">Giá trị còn lại (VNĐ)</label>
                        <input asp-for="NewAsset.remaining_value" type="number" step="0.01" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.asset_status">Tình trạng kết cấu hạ tầng</label>
                        <select asp-for="NewAsset.asset_status" class="form-control" required>
                            <option value="in_use">Đang sử dụng</option>
                            <option value="damaged_not_in_use">Hỏng hóc/Không sử dụng</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.installation_unit">Đơn vị lắp đặt</label>
                        <input asp-for="NewAsset.installation_unit" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label asp-for="NewAsset.management_unit">Đơn vị quản lý</label>
                        <input asp-for="NewAsset.management_unit" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="image">Hình ảnh</label>
                        <input type="file" id="image" name="NewAsset.image" class="form-control" accept="image/*" />
                    </div>

                    <!-- Phần Vị Trí -->
                    <div class="section-title">Vị Trí</div>
                    <div id="map"></div>
                    <div id="coordinatesInput">
                        <p id="instructionText">Click on the map to select a point.</p>
                        <div id="manualCoordinates" class="mt-3">
                            <div class="form-group">
                                <label asp-for="GeometrySystem">Hệ thống tọa độ</label>
                                <select asp-for="GeometrySystem" class="form-control" id="geometrySystem" required>
                                    <option value="">Chọn hệ tọa độ</option>
                                    <option value="wgs84">WGS84</option>
                                    <option value="vn2000">VN2000</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="manualLat">Vĩ độ (Latitude):</label>
                                <input type="text" id="manualLat" class="form-control" placeholder="Nhập vĩ độ" />
                            </div>
                            <div class="form-group">
                                <label for="manualLng">Kinh độ (Longitude):</label>
                                <input type="text" id="manualLng" class="form-control" placeholder="Nhập kinh độ" />
                            </div>
                            <div class="form-group" id="manualCoordsGroup" style="display: none;">
                                <label for="manualCoords">Tọa độ (dạng JSON):</label>
                                <textarea id="manualCoords" class="form-control" rows="3" placeholder='Ví dụ: [[x1, y1], [x2, y2]]'></textarea>
                            </div>
                        </div>
                    </div>
                    <div id="multilineControls" style="display: none;" class="mt-3">
                        <button type="button" class="btn btn-primary me-2" onclick="finishLineStringForMulti()">Hoàn thành LineString</button>
                        <button type="button" class="btn btn-warning" onclick="completeMultiLineString()">Hoàn thành MultiLineString</button>
                    </div>
                    <input type="hidden" id="geometryHidden" name="NewAsset.geometry" />
                    <button type="button" class="btn btn-primary mt-3" onclick="nextTab('attributes-tab')">Tiếp Theo</button>
                </div>

                <!-- Tab 2: Thuộc Tính -->
                <div class="tab-pane fade" id="attributes" role="tabpanel">
                    <div id="attributes-content">
                        <p>Đang tải thuộc tính...</p>
                    </div>
                    <button type="button" class="btn btn-secondary mt-3 me-2" onclick="prevTab('info-tab')">Quay Lại</button>
                    <button type="button" class="btn btn-primary mt-3" onclick="nextTab('review-tab')">Tiếp Theo</button>
                </div>

                <!-- Tab 3: Kiểm Tra Lại -->
                <div class="tab-pane fade" id="review" role="tabpanel">
                    <h4>Tóm tắt thông tin</h4>
                    <div id="review-content"></div>
                    <button type="button" class="btn btn-secondary mt-3 me-2" onclick="prevTab('attributes-tab')">Quay Lại</button>
                    <button type="submit" class="btn btn-success mt-3">Tạo Kết Cấu Hạ Tầng</button>
                </div>
            </div>
            <input type="hidden" id="customAttributesHidden" asp-for="NewAsset.custom_attributes" />
        </form>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <script>
        let map, currentLayer, coordinates = [];
        let selectedCategoryId = null;
        let currentCenter = [21.0285, 105.8542];
        let currentZoom = 13;
        let isPointSelected = false;
        let currentGeoType = 'point'; // Giá trị mặc định
        let currentLine = []; // Biến tạm cho MultiLineString

        // Khởi tạo bản đồ
        document.addEventListener('DOMContentLoaded', function () {
            try {
                map = L.map('map', {
                    center: currentCenter,
                    zoom: currentZoom,
                    zoomControl: true
                });

                // Thử tile layer CartoDB, fallback sang OpenStreetMap nếu lỗi
                let tileLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
                    attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>, © <a href="https://carto.com/attributions">CARTO</a>',
                    subdomains: 'abcd',
                    maxZoom: 20
                });

                tileLayer.on('tileerror', function () {
                    console.warn('CartoDB tile layer failed, switching to OpenStreetMap');
                    map.removeLayer(tileLayer);
                    tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
                        maxZoom: 19
                    }).addTo(map);
                });

                tileLayer.addTo(map);

                const geocoder = L.Control.Geocoder.nominatim();
                L.Control.geocoder({ geocoder: geocoder }).addTo(map);

                map.on('moveend zoomend', function () {
                    currentCenter = map.getCenter();
                    currentZoom = map.getZoom();
                });
            } catch (error) {
                console.error('Error initializing map:', error);
                alert('Không thể khởi tạo bản đồ. Vui lòng kiểm tra kết nối mạng hoặc console để biết thêm chi tiết.');
            }
        });

        $(document).ready(function () {
            $('#assetCreateTabs a[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) {
                if (e.target.id === 'info-tab') {
                    setTimeout(function () {
                        if (map) {
                            map.invalidateSize();
                            map.setView(currentCenter, currentZoom);
                        }
                    }, 100);
                }
                if (e.target.id === 'review-tab') {
                    updateReview();
                }
            });

            // Intercept form submission
            $('#assetForm').on('submit', function (e) {
                if (!validateForm()) {
                    e.preventDefault();
                    return;
                }
                const geometryHiddenField = document.getElementById('geometryHidden');
                if (geometryHiddenField && geometryHiddenField.value) {
                    try {
                        const geometryObj = JSON.parse(geometryHiddenField.value);
                        geometryHiddenField.value = JSON.stringify(geometryObj, null, 0);
                    } catch (error) {
                        console.error('Error parsing geometry JSON:', error);
                        alert('Định dạng hình học không hợp lệ.');
                        e.preventDefault();
                    }
                }
            });
        });

        function selectCategory(id) {
            selectedCategoryId = id;
            $('#attributes-tab').prop('disabled', false);
            $.ajax({
                url: '/Assets/AssetCreate2?handler=GetCategorySchema',
                data: { id: id },
                method: 'GET',
                success: function (response) {
                    let geoType = response.geometryType || 'Point';
                    if (geoType.toLowerCase() === 'line') geoType = 'LineString';
                    if (geoType.toLowerCase() === 'multilinestring') geoType = 'MultiLineString';
                    currentGeoType = geoType.toLowerCase();
                    $('#geoType').val(currentGeoType);
                    $('#geoTypeDisplay').show();
                    updateForm();
                },
                error: function (xhr, status, error) {
                    console.error('AJAX error:', error);
                    currentGeoType = 'point';
                    $('#geoType').val(currentGeoType);
                    $('#geoTypeDisplay').show();
                    updateForm();
                }
            });
        }

        function loadAttributes(id) {
            $.ajax({
                url: '/Assets/AssetCreate2?handler=GetCategorySchema',
                data: { id: id },
                method: 'GET',
                success: function (data) {
                    $('#attributes-content').html(data.html);
                    $('#attributes-content .attribute-input').each(function () {
                        // Loại bỏ required nếu không có trong schema.required
                        if ($(this).attr('required') && !data.schema?.required?.includes($(this).attr('name'))) {
                            $(this).removeAttr('required');
                        }
                        // Cho phép input type="number" nhận chuỗi rỗng
                        if ($(this).attr('type') === 'number') {
                            $(this).attr('min', '');
                            $(this).attr('step', 'any');
                        }
                    });
                    $('#attributes-content .attribute-input').on('change', updateAttributes);
                },
                error: function (xhr, status, error) {
                    console.error('AJAX error loading attributes:', error);
                    $('#attributes-content').html('<p>Đã xảy ra lỗi khi tải thuộc tính.</p>');
                }
            });
        }

        function updateForm() {
            const coordinatesInput = document.getElementById('coordinatesInput');
            const instructionText = document.getElementById('instructionText');
            const manualLat = document.getElementById('manualLat');
            const manualLng = document.getElementById('manualLng');
            const manualCoordsGroup = document.getElementById('manualCoordsGroup');
            const manualCoords = document.getElementById('manualCoords');
            const multilineControls = document.getElementById('multilineControls');

            if (!coordinatesInput) {
                console.error('coordinatesInput element not found');
                return;
            }

            coordinates = [];
            currentLine = [];
            if (currentLayer) {
                map.removeLayer(currentLayer);
                currentLayer = null;
            }

            map.off('click').off('dblclick');
            isPointSelected = false;

            // Reset các ô input
            manualLat.value = '';
            manualLng.value = '';
            manualCoords.value = '';

            if (currentGeoType === 'point') {
                instructionText.textContent = 'Click on the map to select a point or enter coordinates manually below.';
                manualCoordsGroup.style.display = 'none';
                manualLat.parentElement.style.display = 'block';
                manualLng.parentElement.style.display = 'block';
                multilineControls.style.display = 'none';
                map.on('click', onMapClickPoint);
            } else if (currentGeoType === 'linestring') {
                instructionText.textContent = 'Click on the map to add points to the line (double-click to finish) or enter coordinates manually below.';
                manualCoordsGroup.style.display = 'block';
                manualLat.parentElement.style.display = 'none';
                manualLng.parentElement.style.display = 'none';
                multilineControls.style.display = 'none';
                map.on('click', onMapClickLine);
                map.on('dblclick', finishLineString);
            } else if (currentGeoType === 'polygon') {
                instructionText.textContent = 'Click on the map to add points to the polygon (double-click to finish) or enter coordinates manually below.';
                manualCoordsGroup.style.display = 'block';
                manualLat.parentElement.style.display = 'none';
                manualLng.parentElement.style.display = 'none';
                multilineControls.style.display = 'none';
                map.on('click', onMapClickPolygon);
                map.on('dblclick', finishPolygon);
            } else if (currentGeoType === 'multilinestring') {
                instructionText.textContent = 'Click on the map to add points to a line, then click "Hoàn thành LineString" to finish it. Click "Hoàn thành MultiLineString" when done.';
                manualCoordsGroup.style.display = 'block';
                manualLat.parentElement.style.display = 'none';
                manualLng.parentElement.style.display = 'none';
                multilineControls.style.display = 'block';
                map.on('click', onMapClickMultiLineString);
            }

            // Lắng nghe thay đổi thủ công từ người dùng và cập nhật bản đồ
            manualLat.oninput = manualLng.oninput = function () {
                if (currentGeoType === 'point' && manualLat.value && manualLng.value) {
                    const lat = parseFloat(manualLat.value);
                    const lng = parseFloat(manualLng.value);
                    if (!isNaN(lat) && !isNaN(lng)) {
                        coordinates = [lng, lat];
                        updateGeometry('Point', coordinates);
                        updateMapFromManualInput();
                    }
                }
            };
            manualCoords.oninput = function () {
                if (currentGeoType !== 'point' && manualCoords.value) {
                    try {
                        const inputCoords = JSON.parse(manualCoords.value);
                        if (currentGeoType === 'linestring') {
                            coordinates = inputCoords;
                            updateGeometry('LineString', coordinates);
                        } else if (currentGeoType === 'polygon') {
                            coordinates = inputCoords;
                            if (coordinates.length >= 3 && (coordinates[0][0] !== coordinates[coordinates.length - 1][0] || coordinates[0][1] !== coordinates[coordinates.length - 1][1])) {
                                coordinates.push(coordinates[0]);
                            }
                            updateGeometry('Polygon', [coordinates]);
                        } else if (currentGeoType === 'multilinestring') {
                            coordinates = inputCoords;
                            updateGeometry('MultiLineString', coordinates);
                        }
                        updateMapFromManualInput();
                    } catch (e) {
                        console.error('Invalid coordinates JSON:', e);
                    }
                }
            };
        }

        function onMapClickPoint(e) {
            if (isPointSelected) {
                console.log('Point already selected, ignoring click');
                return;
            }

            if (!e || !e.latlng) {
                console.error('Invalid click event or latlng:', e);
                return;
            }

            if (currentLayer) {
                map.removeLayer(currentLayer);
            }
            coordinates = [e.latlng.lng, e.latlng.lat];
            currentLayer = L.marker([e.latlng.lat, e.latlng.lng]).addTo(map);
            document.getElementById('manualLat').value = e.latlng.lat;
            document.getElementById('manualLng').value = e.latlng.lng;
            document.getElementById('geometrySystem').value = 'wgs84';
            updateGeometry('Point', coordinates);
            isPointSelected = true;

            const geocoder = L.Control.Geocoder.nominatim();
            geocoder.reverse(e.latlng, map.options.crs.scale(map.getZoom()), function (results) {
                if (results.length > 0) {
                    $('#NewAsset_address').val(results[0].name); // Sửa ID để khớp với asp-for
                    updateAttributes();
                }
            });
        }

        function onMapClickLine(e) {
            if (!e || !e.latlng) {
                console.error('Invalid click event or latlng:', e);
                return;
            }

            coordinates.push([e.latlng.lng, e.latlng.lat]);
            if (currentLayer) {
                map.removeLayer(currentLayer);
            }
            currentLayer = L.polyline(coordinates.map(coord => [coord[1], coord[0]]), { color: 'blue' }).addTo(map);
            document.getElementById('manualCoords').value = JSON.stringify(coordinates);
            document.getElementById('geometrySystem').value = 'wgs84';
            updateGeometry('LineString', coordinates);
        }

        function finishLineString() {
            if (coordinates.length < 2) {
                alert('A LineString requires at least 2 points.');
                return;
            }
            if (currentLayer) {
                map.removeLayer(currentLayer);
            }
            currentLayer = L.polyline(coordinates.map(coord => [coord[1], coord[0]]), { color: 'blue' }).addTo(map);
            document.getElementById('manualCoords').value = JSON.stringify(coordinates);
            updateGeometry('LineString', coordinates);
            map.off('click').off('dblclick');
        }

        function onMapClickPolygon(e) {
            if (!e || !e.latlng) {
                console.error('Invalid click event or latlng:', e);
                return;
            }

            coordinates.push([e.latlng.lng, e.latlng.lat]);
            if (currentLayer) {
                map.removeLayer(currentLayer);
            }
            currentLayer = L.polygon(coordinates.map(coord => [coord[1], coord[0]]), { color: 'blue' }).addTo(map);
            document.getElementById('manualCoords').value = JSON.stringify(coordinates);
            document.getElementById('geometrySystem').value = 'wgs84';
            updateGeometry('Polygon', [coordinates]);
        }

        function finishPolygon() {
            if (coordinates.length < 3) {
                alert('A Polygon requires at least 3 points.');
                return;
            }
            coordinates.push(coordinates[0]);
            if (currentLayer) {
                map.removeLayer(currentLayer);
            }
            currentLayer = L.polygon(coordinates.map(coord => [coord[1], coord[0]]), { color: 'blue' }).addTo(map);
            document.getElementById('manualCoords').value = JSON.stringify(coordinates);
            updateGeometry('Polygon', [coordinates]);
            map.off('click').off('dblclick');
        }

        function onMapClickMultiLineString(e) {
            if (!e || !e.latlng) {
                console.error('Invalid click event or latlng:', e);
                return;
            }

            currentLine.push([e.latlng.lng, e.latlng.lat]);
            if (currentLayer) {
                map.removeLayer(currentLayer);
            }
            let displayCoords = coordinates.slice();
            if (currentLine.length > 0) {
                displayCoords.push(currentLine);
            }
            currentLayer = L.featureGroup(displayCoords.map(line =>
                L.polyline(line.map(coord => [coord[1], coord[0]]), { color: 'blue' })
            )).addTo(map);
            document.getElementById('manualCoords').value = JSON.stringify(displayCoords);
            document.getElementById('geometrySystem').value = 'wgs84';
            updateGeometry('MultiLineString', displayCoords);
        }

        function finishLineStringForMulti() {
            if (currentLine.length < 2) {
                alert('Each LineString in a MultiLineString requires at least 2 points.');
                return;
            }

            coordinates.push(currentLine);
            currentLine = [];
            if (currentLayer) {
                map.removeLayer(currentLayer);
            }
            currentLayer = L.featureGroup(coordinates.map(line =>
                L.polyline(line.map(coord => [coord[1], coord[0]]), { color: 'blue' })
            )).addTo(map);
            document.getElementById('manualCoords').value = JSON.stringify(coordinates);
            updateGeometry('MultiLineString', coordinates);
        }

        function completeMultiLineString() {
            if (coordinates.length === 0 || coordinates.some(line => line.length < 2)) {
                alert('MultiLineString cần ít nhất một đường với tối thiểu 2 điểm.');
                return;
            }
            map.off('click');
            document.getElementById('multilineControls').style.display = 'none';
            document.getElementById('instructionText').textContent = 'MultiLineString đã hoàn thành. Nhấn "Tiếp Theo" để tiếp tục.';
        }

        function updateMapFromManualInput() {
            if (currentLayer) {
                map.removeLayer(currentLayer);
            }

            if (currentGeoType === 'point' && coordinates.length === 2) {
                const [lng, lat] = coordinates;
                currentLayer = L.marker([lat, lng]).addTo(map);
                map.setView([lat, lng], currentZoom);
                isPointSelected = true;
            } else if (currentGeoType === 'linestring' && coordinates.length >= 2) {
                currentLayer = L.polyline(coordinates.map(coord => [coord[1], coord[0]]), { color: 'blue' }).addTo(map);
                map.fitBounds(currentLayer.getBounds());
            } else if (currentGeoType === 'polygon' && coordinates.length >= 3) {
                currentLayer = L.polygon(coordinates.map(coord => [coord[1], coord[0]]), { color: 'blue' }).addTo(map);
                map.fitBounds(currentLayer.getBounds());
            } else if (currentGeoType === 'multilinestring' && coordinates.length >= 1) {
                currentLayer = L.featureGroup(coordinates.map(line =>
                    L.polyline(line.map(coord => [coord[1], coord[0]]), { color: 'blue' })
                )).addTo(map);
                map.fitBounds(currentLayer.getBounds());
            }
        }

        function updateGeometry(type, coords) {
            const geometryHiddenField = document.getElementById('geometryHidden');
            if (geometryHiddenField) {
                const geometryObj = { type: type, coordinates: coords };
                geometryHiddenField.value = JSON.stringify(geometryObj);
                console.log('Geometry updated:', geometryObj);
            } else {
                console.error('Geometry field not found');
            }
            updateReview();
        }

        function updateAttributes() {
            const attributes = {};
            $('#attributes-content .attribute-input').each(function () {
                attributes[$(this).attr('id')] = $(this).val() || '';
            });
            $('#customAttributesHidden').val(JSON.stringify(attributes));
            updateReview();
        }

        function nextTab(tabId) {
            const currentTab = $('.nav-link.active').attr('id');
            if (validateForm(currentTab)) {
                $(`#${tabId}`).prop('disabled', false).tab('show');
                if (tabId === 'attributes-tab' && selectedCategoryId) {
                    loadAttributes(selectedCategoryId);
                }
            }
        }

        function prevTab(tabId) {
            $(`#${tabId}`).tab('show');
        }

        function validateForm(tabId) {
            let valid = true;
            let errorMessage = '';

            if (tabId === 'info-tab') {
                if (!selectedCategoryId) {
                    errorMessage += 'Vui lòng chọn một danh mục.\n';
                    valid = false;
                }
                const requiredFields = $('#info .form-control[required]');
                requiredFields.each(function () {
                    if (!$(this).val()) {
                        errorMessage += `Trường ${$(this).prev('label').text()} là bắt buộc.\n`;
                        $(this).next('.text-danger').text('Trường này là bắt buộc.');
                        valid = false;
                    } else {
                        $(this).next('.text-danger').text('');
                    }
                });

                if (!coordinates.length) {
                    errorMessage += 'Vui lòng chọn vị trí trên bản đồ hoặc nhập tọa độ thủ công.\n';
                    valid = false;
                }
                if (currentGeoType === 'linestring' && coordinates.length < 2) {
                    errorMessage += 'LineString cần ít nhất 2 điểm.\n';
                    valid = false;
                }
                if (currentGeoType === 'polygon' && coordinates.length < 3) {
                    errorMessage += 'Polygon cần ít nhất 3 điểm.\n';
                    valid = false;
                }
                if (currentGeoType === 'multilinestring' && (coordinates.length === 0 || coordinates.some(line => line.length < 2))) {
                    errorMessage += 'MultiLineString cần ít nhất một đường với tối thiểu 2 điểm.\n';
                    valid = false;
                }
            }

            // Kiểm tra trường động trong tab "Thuộc tính" (nếu đã tải)
            const attributeFields = $('#attributes-content .attribute-input');
            if (attributeFields.length > 0) {
                attributeFields.each(function () {
                    if ($(this).attr('type') === 'number' && $(this).val() !== '' && isNaN($(this).val())) {
                        errorMessage += `Trường ${$(this).prev('label').text()} phải là số hợp lệ.\n`;
                        valid = false;
                    }
                });
            }

            if (errorMessage) {
                alert(errorMessage);
            }

            return valid;
        }

        function updateReview() {
            let reviewHtml = '<h5>Thông Tin Cơ Bản</h5><ul>';
            $('#assetForm').serializeArray().forEach(function (field) {
                if (field.name.startsWith('NewAsset.') && field.name !== 'NewAsset.geometry' && field.name !== 'NewAsset.custom_attributes') {
                    reviewHtml += `<li><strong>${field.name.replace('NewAsset.', '')}:</strong> ${field.value || 'Chưa nhập'}</li>`;
                }
            });
            reviewHtml += '</ul><h5>Thuộc Tính Động</h5><ul>';
            const attributes = JSON.parse($('#customAttributesHidden').val() || '{}');
            for (let key in attributes) {
                reviewHtml += `<li><strong>${key}:</strong> ${attributes[key] || 'Chưa nhập'}</li>`;
            }
            reviewHtml += '</ul><h5>Tọa Độ</h5><ul>';
            const geometry = JSON.parse($('#geometryHidden').val() || '{}');
            if (geometry.coordinates) {
                reviewHtml += `<li><strong>Tọa độ:</strong> ${JSON.stringify(geometry.coordinates)}</li>`;
            }
            reviewHtml += '</ul>';
            $('#review-content').html(reviewHtml);
        }
    </script>
</body>
</html>