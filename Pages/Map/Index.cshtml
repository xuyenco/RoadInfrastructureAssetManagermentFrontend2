@page
@model RoadInfrastructureAssetManagementFrontend2.Pages.Map.IndexModel

@{
    Layout = "_Layout";
    ViewData["Title"] = "Quản lý Hạ tầng Đường bộ";
    ViewData["Mapview"] = "Leaflet";
}

<div id="map" class="absolute top-16 left-0 right-0 bottom-0 z-0"></div>

<button class="toggle-filter-btn fixed top-24 left-4 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg hover:bg-blue-700 transition z-10" id="toggleFilterBtn">
    <i class="fas fa-filter mr-2"></i> Bộ lọc Layer
</button>

<div class="navbar-filter fixed top-0 -left-80 w-80 h-full bg-white bg-opacity-95 p-6 z-50 shadow-lg transition-all duration-300" id="filterNavbar">
    <button class="close-filter-btn absolute top-4 right-4 text-gray-600 hover:text-red-600 transition" id="closeFilterBtn">
        <i class="fas fa-times"></i>
    </button>
    <h4 class="text-gray-800 font-bold mb-6">Chọn Layer hiển thị</h4>
    <div id="treefolder">
        <div id="map-layers" class="open">
            <div class="folder" id="RootLayers">
                <p>
                    <i class="fas fa-caret-right" aria-hidden="true"></i>
                    <i class="fas fa-layer-group mr-2 text-red-600"></i>
                    Layers
                </p>
                <div class="children">
                    <div class="folder" id="tasksFolder">
                        <p>
                            <i class="fas fa-caret-right" aria-hidden="true"></i>
                            <i class="fas fa-folder mr-2 text-yellow-600"></i>
                            Nhiệm vụ
                            <input type="checkbox" id="tasksLayerToggle" checked class="ml-2">
                        </p>
                        <div class="children hidden">
                            <div class="layer-item" data-task-type="Sửa chữa đột xuất">
                                <input type="checkbox" class="task-category-toggle" checked>
                                <span>Sửa chữa đột xuất</span>
                            </div>
                            <div class="layer-item" data-task-type="Sửa chữa định kì">
                                <input type="checkbox" class="task-category-toggle" checked>
                                <span>Sửa chữa định kì</span>
                            </div>
                        </div>
                    </div>
                    <div class="folder" id="incidentsFolder">
                        <p>
                            <i class="fas fa-caret-right" aria-hidden="true"></i>
                            <i class="fas fa-folder mr-2 text-yellow-600"></i>
                            Sự cố
                            <input type="checkbox" id="incidentsLayerToggle" checked class="ml-2">
                        </p>
                    </div>
                    <div class="folder" id="assetsFolder">
                        <p>
                            <i class="fas fa-caret-right" aria-hidden="true"></i>
                            <i class="fas fa-folder mr-2 text-yellow-600"></i>
                            Tài sản
                            <input type="checkbox" id="assetsLayerToggle" checked class="ml-2">
                        </p>
                        <div class="children hidden">
                            @foreach (var category in Model.AssetCategories)
                            {
                                    <div class="layer-item" data-category-id="@category.category_id">
                                        <input type="checkbox" class="asset-category-toggle" checked>
                                        <span>@category.category_name</span>
                                    </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="fixed top-20 right-4 z-10 max-w-xs">
    <div class="bg-white bg-opacity-90 p-4 rounded-lg shadow-lg">
        <h1 class="text-xl font-bold text-gray-800 mb-4">Quản lý Hạ tầng</h1>
        @if (TempData["Error"] != null)
        {
                <div class="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg">
                @TempData["Error"]
                </div>
        }
        <div class="flex flex-col gap-2">
            <a class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition w-full block text-center" asp-page="/Tasks/TaskCreate">
                <i class="fas fa-plus mr-2"></i> Tạo Nhiệm vụ mới
            </a>
            <a class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition w-full block text-center" asp-page="/Incidents/IncidentCreate">
                <i class="fas fa-plus mr-2"></i> Tạo Sự cố mới
            </a>
            <a class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition w-full block text-center" asp-page="/Assets/AssetCreate2">
                <i class="fas fa-plus mr-2"></i> Tạo Tài sản mới
            </a>
            @if (HttpContext.Session.GetString("Role") == "manager" || HttpContext.Session.GetString("Role") == "inspector")
            {
                    <button class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition w-full mb-2" onclick="exportReports()">
                        <i class="fas fa-file-export mr-2"></i> Xuất báo cáo
                    </button>
            }
        </div>
    </div>
</div>
@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        #nav-menu {
            display: flex !important;
        }

        .navbar-filter {
            transition: left 0.3s ease;
        }

            .navbar-filter.open {
                left: 0;
            }

        #treefolder {
            font-size: 0.9rem;
        }

        .folder > p {
            cursor: pointer;
            margin: 0.5rem 0;
            display: flex;
            align-items: center;
        }

            .folder > p:hover {
                background: #f0f0f0;
            }

        .layer-item {
            display: flex;
            align-items: center;
            margin: 0.3rem 0;
            padding-left: 1.5rem;
        }

            .layer-item input {
                margin-right: 0.5rem;
            }

        .children {
            margin-left: 1.5rem;
        }

        .hidden {
            display: none;
        }

        .fa-caret-down, .fa-caret-right {
            margin-right: 0.5rem;
        }

        .marker-cluster-small {
            background-color: rgba(181, 226, 140, 0.6);
        }

        .marker-cluster-medium {
            background-color: rgba(241, 211, 87, 0.6);
        }

        .marker-cluster-large {
            background-color: rgba(253, 156, 115, 0.6);
        }
    </style>
    <script>
        const userTaskRole = '@(HttpContext.Session.GetString("Role") ?? "")';
        const userTaskId = @(HttpContext.Session.GetInt32("Id")?.ToString() ?? "0");

        if (!userTaskRole || userTaskId === 0) {
            console.warn('Session invalid: Role or ID missing. Redirecting to login.');
            alert('Phiên đăng nhập không hợp lệ. Vui lòng đăng nhập lại.');
            window.location.href = '/Users/Login';
        }

        function toggleFilterNavbar() {
            var navbar = document.getElementById('filterNavbar');
            navbar.classList.toggle('open');
            navbar.style.left = navbar.classList.contains('open') ? '0' : '-20rem';
        }

        document.addEventListener('DOMContentLoaded', function () {
            const map = L.map('map', {
                minZoom: 15 // Giới hạn mức zoom out để tránh lag
            }).setView([21.0285, 105.8542], 18);

            L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
                attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>, © <a href="https://carto.com/attributions">CARTO</a>',
                subdomains: 'abcd',
                maxZoom: 20
            }).addTo(map);

            const suddenRepairLayer = L.geoJSON(null, {
                pointToLayer: function (feature, latlng) {
                    return L.marker(latlng);
                },
                style: function (feature) {
                    if (feature.geometry.type === 'LineString') {
                        return { color: 'blue', weight: 3 };
                    }
                    return {};
                },
                onEachFeature: function (feature, layer) {
                    if (feature.properties) {
                        const props = feature.properties;
                        const popupContent = `
                                    <div class="p-4 max-w-xs font-sans text-gray-800">
                                        <h3 class="text-lg font-semibold text-gray-800 mb-2">Thông tin nhiệm vụ</h3>
                                        <table class="w-full text-sm border-collapse">
                                            <tr class="border-b">
                                                <td class="p-2 font-semibold">Mã Nhiệm vụ:</td>
                                                <td class="p-2">${props.task_id || 'Chưa có'}</td>
                                            </tr>
                                            <tr class="border-b">
                                                <td class="p-2 font-semibold">Loại Nhiệm vụ:</td>
                                                <td class="p-2">${props.task_type || 'Chưa có'}</td>
                                            </tr>
                                            <tr class="border-b">
                                                <td class="p-2 font-semibold">Trạng thái:</td>
                                                <td class="p-2">${props.status || 'Chưa có'}</td>
                                            </tr>
                                            <tr class="border-b">
                                                <td class="p-2 font-semibold">Địa chỉ:</td>
                                                <td class="p-2">${props.address || 'Chưa có'}</td>
                                            </tr>
                                            <tr class="border-b">
                                                <td class="p-2 font-semibold">Ngày bắt đầu:</td>
                                                <td class="p-2">${props.start_date ? new Date(props.start_date).toLocaleDateString('vi-VN') : 'Chưa có'}</td>
                                            </tr>
                                        </table>
                                        <div class="text-center mt-4 flex justify-center gap-2">
                                            <button id="update-btn-task-${props.task_id}" class="bg-blue-500 text-white px-3 py-1 rounded-lg shadow-md hover:bg-blue-600 transition duration-200">Cập nhật</button>
                                            <button id="detail-btn-task-${props.task_id}" class="bg-blue-500 text-white px-3 py-1 rounded-lg shadow-md hover:bg-blue-600 transition duration-200">Chi tiết</button>
                                            <button id="delete-btn-task-${props.task_id}" class="bg-red-500 text-white px-3 py-1 rounded-lg shadow-md hover:bg-red-600 transition duration-200">Xóa</button>
                                        </div>
                                    </div>
                                `;
                        layer.bindPopup(popupContent, { autoClose: false }).on('popupopen', function () {
                            document.getElementById(`update-btn-task-${props.task_id}`).addEventListener('click', function () {
                                window.location.href = `/Tasks/TaskUpdate/${props.task_id}`;
                            });
                            document.getElementById(`detail-btn-task-${props.task_id}`).addEventListener('click', function () {
                                window.location.href = `/Tasks/TaskDetail/${props.task_id}`;
                            });
                            document.getElementById(`delete-btn-task-${props.task_id}`).addEventListener('click', function () {
                                if (confirm('Bạn có chắc chắn muốn xóa nhiệm vụ này?')) {
                                    $.ajax({
                                        url: '/Tasks/Index?handler=Delete',
                                        type: 'POST',
                                        data: { id: props.task_id },
                                        headers: {
                                            "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                                        },
                                        success: function (response) {
                                            if (response.success) {
                                                suddenRepairLayer.removeLayer(layer);
                                                periodicRepairLayer.removeLayer(layer);
                                                alert('Xóa nhiệm vụ thành công!');
                                            } else {
                                                alert('Xóa nhiệm vụ thất bại: ' + (response.message || 'Không rõ nguyên nhân'));
                                            }
                                        },
                                        error: function (xhr) {
                                            let errorMsg = xhr.responseJSON?.message || 'Đã xảy ra lỗi khi xóa nhiệm vụ.';
                                            alert(errorMsg);
                                        }
                                    });
                                }
                            });
                        });
                    }
                }
            }).addTo(map);

            const periodicRepairLayer = L.geoJSON(null, {
                pointToLayer: function (feature, latlng) {
                    return L.marker(latlng);
                },
                style: function (feature) {
                    if (feature.geometry.type === 'LineString') {
                        return { color: 'blue', weight: 3 };
                    }
                    return {};
                },
                onEachFeature: function (feature, layer) {
                    if (feature.properties) {
                        const props = feature.properties;
                        const popupContent = `
                                    <div class="p-4 max-w-xs font-sans text-gray-800">
                                        <h3 class="text-lg font-semibold text-gray-800 mb-2">Thông tin nhiệm vụ</h3>
                                        <table class="w-full text-sm border-collapse">
                                            <tr class="border-b">
                                                <td class="p-2 font-semibold">Mã Nhiệm vụ:</td>
                                                <td class="p-2">${props.task_id || 'Chưa có'}</td>
                                            </tr>
                                            <tr class="border-b">
                                                <td class="p-2 font-semibold">Loại Nhiệm vụ:</td>
                                                <td class="p-2">${props.task_type || 'Chưa có'}</td>
                                            </tr>
                                            <tr class="border-b">
                                                <td class="p-2 font-semibold">Trạng thái:</td>
                                                <td class="p-2">${props.status || 'Chưa có'}</td>
                                            </tr>
                                            <tr class="border-b">
                                                <td class="p-2 font-semibold">Địa chỉ:</td>
                                                <td class="p-2">${props.address || 'Chưa có'}</td>
                                            </tr>
                                            <tr class="border-b">
                                                <td class="p-2 font-semibold">Ngày bắt đầu:</td>
                                                <td class="p-2">${props.start_date ? new Date(props.start_date).toLocaleDateString('vi-VN') : 'Chưa có'}</td>
                                            </tr>
                                        </table>
                                        <div class="text-center mt-4 flex justify-center gap-2">
                                            <button id="update-btn-task-${props.task_id}" class="bg-blue-500 text-white px-3 py-1 rounded-lg shadow-md hover:bg-blue-600 transition duration-200">Cập nhật</button>
                                            <button id="detail-btn-task-${props.task_id}" class="bg-blue-500 text-white px-3 py-1 rounded-lg shadow-md hover:bg-blue-600 transition duration-200">Chi tiết</button>
                                            <button id="delete-btn-task-${props.task_id}" class="bg-red-500 text-white px-3 py-1 rounded-lg shadow-md hover:bg-red-600 transition duration-200">Xóa</button>
                                        </div>
                                    </div>
                                `;
                        layer.bindPopup(popupContent, { autoClose: false }).on('popupopen', function () {
                            document.getElementById(`update-btn-task-${props.task_id}`).addEventListener('click', function () {
                                window.location.href = `/Tasks/TaskUpdate/${props.task_id}`;
                            });
                            document.getElementById(`detail-btn-task-${props.task_id}`).addEventListener('click', function () {
                                window.location.href = `/Tasks/TaskDetail/${props.task_id}`;
                            });
                            document.getElementById(`delete-btn-task-${props.task_id}`).addEventListener('click', function () {
                                if (confirm('Bạn có chắc chắn muốn xóa nhiệm vụ này?')) {
                                    $.ajax({
                                        url: '/Tasks/Index?handler=Delete',
                                        type: 'POST',
                                        data: { id: props.task_id },
                                        headers: {
                                            "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                                        },
                                        success: function (response) {
                                            if (response.success) {
                                                suddenRepairLayer.removeLayer(layer);
                                                periodicRepairLayer.removeLayer(layer);
                                                alert('Xóa nhiệm vụ thành công!');
                                            } else {
                                                alert('Xóa nhiệm vụ thất bại: ' + (response.message || 'Không rõ nguyên nhân'));
                                            }
                                        },
                                        error: function (xhr) {
                                            let errorMsg = xhr.responseJSON?.message || 'Đã xảy ra lỗi khi xóa nhiệm vụ.';
                                            alert(errorMsg);
                                        }
                                    });
                                }
                            });
                        });
                    }
                }
            }).addTo(map);

            const incidentsLayer = L.markerClusterGroup({
                spiderfyOnMaxZoom: true,
                showCoverageOnHover: false,
                maxClusterRadius: 80
            }).addTo(map);

            const assetCategories = @Html.Raw(Json.Serialize(Model.AssetCategories));
            const defaultIconUrl = 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png';
            const layerConfig = {};
            const categoryLayers = {};
            assetCategories.forEach(category => {
                layerConfig[category.category_id] = {
                    name: category.category_name.toLowerCase().replace(/\s+/g, '_') + '_layer',
                    iconUrl: category.icon_url && category.icon_url.trim() !== '' ? category.icon_url : defaultIconUrl
                };
                categoryLayers[category.category_id] = L.markerClusterGroup({
                    spiderfyOnMaxZoom: true,
                    showCoverageOnHover: false,
                    maxClusterRadius: 80
                }).addTo(map);
            });

            function getLineWeight(zoom) {
                if (zoom >= 15) return 4;
                return 4sss;
            }

            map.on('zoomend', function () {
                Object.values(categoryLayers).forEach(layer => {
                    layer.eachLayer(l => {
                        if (l.feature && l.feature.geometry.type === 'LineString') {
                            l.setStyle({
                                weight: getLineWeight(map.getZoom())
                            });
                        }
                    });
                });
            });

            let currentLoadId = 0;

            function loadAssets(categoryId) {
                const loadId = ++currentLoadId;
                const bounds = map.getBounds();
                const bbox = `${bounds.getWest()},${bounds.getSouth()},${bounds.getEast()},${bounds.getNorth()}`;
                const cqlFilter = `category_id='${categoryId}' AND BBOX(geometry, ${bbox}, 'EPSG:4326')`;
                const wfsUrl = `http://localhost:8080/geoserver/wfs?service=WFS&version=1.0.0&request=GetFeature&typeName=cite:assets_layer_2&outputFormat=json&srsName=EPSG:4326&cql_filter=${encodeURIComponent(cqlFilter)}`;

                console.log(`Fetching assets for category ${categoryId}: ${wfsUrl}`);

                return fetch(wfsUrl)
                    .then(response => response.text().then(text => ({ response, text })))
                    .then(({ response, text }) => {
                        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}, Response: ${text}`);
                        const contentType = response.headers.get('content-type');
                        console.log(`Content-Type: ${contentType}`);
                        if (!contentType || !contentType.includes('json')) {
                            console.error(`Expected JSON but received: ${text.substring(0, 200)}...`);
                            throw new Error(`Expected JSON but received ${contentType}`);
                        }
                        return JSON.parse(text);
                    })
                    .then(data => {
                        if (loadId !== currentLoadId) return;
                        if (data.features && data.features.length > 0) {
                            categoryLayers[categoryId].clearLayers();
                            data.features.forEach((feature, index) => {
                                if (feature.geometry && feature.geometry.type === "Point") {
                                    const coords = feature.geometry.coordinates;
                                    const marker = L.marker([coords[1], coords[0]], {
                                        icon: L.icon({
                                            iconUrl: layerConfig[categoryId].iconUrl,
                                            iconSize: [25, 41],
                                            iconAnchor: [12, 41],
                                            iconErrorUrl: defaultIconUrl
                                        })
                                    });
                                    const popupContent = createAssetPopupContent(feature, index);
                                    marker.bindPopup(popupContent, { autoClose: false }).on('popupopen', () => {
                                        const updateBtn = document.getElementById(`update-btn-asset-${feature.properties.asset_id}-${index}`);
                                        const maintenanceBtn = document.getElementById(`maintenance-btn-asset-${feature.properties.asset_id}-${index}`);
                                        if (updateBtn) {
                                            updateBtn.addEventListener('click', (e) => {
                                                e.preventDefault();
                                                if (confirm('Bạn có muốn cập nhật asset này không?')) {
                                                    window.location.href = `/Assets/AssetUpdate?id=${feature.properties.asset_id}`;
                                                }
                                            });
                                        }
                                        if (maintenanceBtn) {
                                            maintenanceBtn.addEventListener('click', (e) => {
                                                e.preventDefault();
                                                window.location.href = `/MaintenanceHistory/MaintenanceHistorybyAssetId/${feature.properties.asset_id}`;
                                            });
                                        }
                                    });
                                    categoryLayers[categoryId].addLayer(marker);
                                } else if (feature.geometry && (feature.geometry.type === "LineString" || feature.geometry.type === "MultiLineString")) {
                                    const layer = L.geoJSON(feature, {
                                        style: { color: 'blue', weight: getLineWeight(map.getZoom()) },
                                        clickTolerance:20,
                                        onEachFeature: (feature, layer) => {
                                            const popupContent = createAssetPopupContent(feature, index);
                                            layer.bindPopup(popupContent, { autoClose: false }).on('popupopen', () => {
                                                const updateBtn = document.getElementById(`update-btn-asset-${feature.properties.asset_id}-${index}`);
                                                const maintenanceBtn = document.getElementById(`maintenance-btn-asset-${feature.properties.asset_id}-${index}`);
                                                if (updateBtn) {
                                                    updateBtn.addEventListener('click', (e) => {
                                                        e.preventDefault();
                                                        if (confirm('Bạn có muốn cập nhật asset này không?')) {
                                                            window.location.href = `/Assets/AssetUpdate?id=${feature.properties.asset_id}`;
                                                        }
                                                    });
                                                }
                                                if (maintenanceBtn) {
                                                    maintenanceBtn.addEventListener('click', (e) => {
                                                        e.preventDefault();
                                                        window.location.href = `/MaintenanceHistory/MaintenanceHistorybyAssetId/${feature.properties.asset_id}`;
                                                    });
                                                }
                                            });
                                        }
                                    });
                                    categoryLayers[categoryId].addLayer(layer);
                                }
                            });
                        }
                    })
                    .catch(error => {
                        console.error(`Error fetching assets for category ${categoryId}:`, error);
                    });
            }

            function createAssetPopupContent(feature, index) {
                const props = feature.properties || {};
                return `
                            <div class="p-4 max-w-xs font-sans text-gray-800">
                                <h3 class="text-lg font-semibold text-gray-800 mb-2">Thông tin tài sản</h3>
                                <table class="w-full text-sm border-collapse">
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">ID:</td>
                                        <td class="p-2">${props.asset_id || 'N/A'}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Tên tài sản:</td>
                                        <td class="p-2">${props.asset_name || 'N/A'}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Mã tài sản:</td>
                                        <td class="p-2">${props.asset_code || 'N/A'}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Địa chỉ:</td>
                                        <td class="p-2">${props.address || 'N/A'}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Tình trạng:</td>
                                        <td class="p-2">${props.asset_status || 'N/A'}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Đơn vị quản lý:</td>
                                        <td class="p-2">${props.management_unit || 'N/A'}</td>
                                    </tr>
                                </table>
                                <div class="text-center mt-4">
                                    <a id="update-btn-asset-${props.asset_id || 'unknown'}-${index}" class="bg-blue-500 text-white px-3 py-1 rounded-lg shadow-md hover:bg-blue-600 transition duration-200 mr-2 inline-block" style="color: white !important;">Cập nhật</a>
                                    <a id="maintenance-btn-asset-${props.asset_id || 'unknown'}-${index}" class="bg-green-500 text-white px-3 py-1 rounded-lg shadow-md hover:bg-green-600 transition duration-200 inline-block" style="color: white !important;">Lịch sử bảo dưỡng</a>
                                </div>
                            </div>
                        `;
            }

            function updateMap() {
                // Không gọi map.fitBounds() để giữ nguyên mức zoom hiện tại
            }

            function debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }

            const debouncedLoadAssets = debounce(() => {
                if (assetsToggle.checked) {
                    const promises = [];
                    assetCategoryToggles.forEach(toggle => {
                        if (toggle.checked) {
                            const categoryId = toggle.parentElement.dataset.categoryId;
                            promises.push(loadAssets(categoryId));
                        }
                    });
                    Promise.all(promises).then(() => updateMap());
                }
            }, 300);

            document.querySelectorAll('.folder > p').forEach(folder => {
                folder.addEventListener('click', (e) => {
                    if (e.target.type !== 'checkbox') {
                        const children = folder.parentElement.querySelector('.children');
                        const icon = folder.querySelector('.fa-caret-right, .fa-caret-down');
                        if (children) {
                            children.classList.toggle('hidden');
                            icon.classList.toggle('fa-caret-right');
                            icon.classList.toggle('fa-caret-down');
                        }
                    }
                });
            });

            const toggleBtn = document.getElementById('toggleFilterBtn');
            const closeBtn = document.getElementById('closeFilterBtn');
            const tasksToggle = document.getElementById('tasksLayerToggle');
            const incidentsToggle = document.getElementById('incidentsLayerToggle');
            const assetsToggle = document.getElementById('assetsLayerToggle');
            const taskCategoryToggles = document.querySelectorAll('.task-category-toggle');
            const assetCategoryToggles = document.querySelectorAll('.asset-category-toggle');

            if (toggleBtn) toggleBtn.addEventListener('click', toggleFilterNavbar);
            if (closeBtn) closeBtn.addEventListener('click', toggleFilterNavbar);

            if (tasksToggle) {
                tasksToggle.addEventListener('change', function () {
                    const checked = this.checked;
                    taskCategoryToggles.forEach(toggle => {
                        toggle.checked = checked;
                        const taskType = toggle.parentElement.dataset.taskType;
                        const layer = taskType === 'Sửa chữa đột xuất' ? suddenRepairLayer : periodicRepairLayer;
                        if (checked) {
                            map.addLayer(layer);
                            loadTasks();
                        } else {
                            map.removeLayer(layer);
                        }
                    });
                    updateMap();
                });
            }

            if (incidentsToggle) {
                incidentsToggle.addEventListener('change', function () {
                    if (this.checked) {
                        map.addLayer(incidentsLayer);
                        loadIncidents();
                    } else {
                        map.removeLayer(incidentsLayer);
                    }
                    updateMap();
                });
            }

            if (assetsToggle) {
                assetsToggle.addEventListener('change', function () {
                    const checked = this.checked;
                    assetCategoryToggles.forEach(toggle => {
                        toggle.checked = checked;
                        const categoryId = toggle.parentElement.dataset.categoryId;
                        if (checked) {
                            map.addLayer(categoryLayers[categoryId]);
                            loadAssets(categoryId);
                        } else {
                            map.removeLayer(categoryLayers[categoryId]);
                            categoryLayers[categoryId].clearLayers();
                        }
                    });
                    const allChecked = Array.from(assetCategoryToggles).every(t => t.checked);
                    assetsToggle.checked = allChecked;
                    updateMap();
                    if (checked && !map._moveendListenerAdded) {
                        map.on('moveend', debouncedLoadAssets);
                        map._moveendListenerAdded = true;
                    } else if (!checked) {
                        map.off('moveend', debouncedLoadAssets);
                        map._moveendListenerAdded = false;
                    }
                });
            }

            taskCategoryToggles.forEach(toggle => {
                toggle.addEventListener('change', function () {
                    const taskType = this.parentElement.dataset.taskType;
                    const layer = taskType === 'Sửa chữa đột xuất' ? suddenRepairLayer : periodicRepairLayer;
                    if (this.checked) {
                        map.addLayer(layer);
                        loadTasks();
                    } else {
                        map.removeLayer(layer);
                    }
                    const allChecked = Array.from(taskCategoryToggles).every(t => t.checked);
                    tasksToggle.checked = allChecked;
                    updateMap();
                });
            });

            assetCategoryToggles.forEach(toggle => {
                toggle.addEventListener('change', function () {
                    const categoryId = this.parentElement.dataset.categoryId;
                    if (this.checked) {
                        map.addLayer(categoryLayers[categoryId]);
                        loadAssets(categoryId);
                    } else {
                        map.removeLayer(categoryLayers[categoryId]);
                        categoryLayers[categoryId].clearLayers();
                    }
                    const allChecked = Array.from(assetCategoryToggles).every(t => t.checked);
                    assetsToggle.checked = allChecked;
                    updateMap();
                });
            });

            function loadTasks() {
                const taskTypes = ['Sửa chữa đột xuất', 'Sửa chữa định kì'];
                const layers = {
                    'Sửa chữa đột xuất': suddenRepairLayer,
                    'Sửa chữa định kì': periodicRepairLayer
                };

                const promises = taskTypes.map(taskType => {
                    let cqlFilter = `task_type='${taskType}'`;
                    if (userTaskRole === 'technician' && userTaskId > 0) {
                        cqlFilter += ` AND execution_unit_id = ${userTaskId}`;
                    }

                    const wfsUrl = `http://localhost:8080/geoserver/wfs?service=WFS&version=1.0.0&request=GetFeature&typeName=cite:tasks_layer_2&outputFormat=application/json&srsName=EPSG:4326&cql_filter=${encodeURIComponent(cqlFilter)}`;

                    return fetch(wfsUrl)
                        .then(response => response.text().then(text => ({ response, text })))
                        .then(({ response, text }) => {
                            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}, Response: ${text}`);
                            return JSON.parse(text);
                        })
                        .then(data => {
                            layers[taskType].clearLayers();
                            if (data.features && data.features.length > 0) {
                                layers[taskType].addData(data);
                            }
                        })
                        .catch(error => {
                            console.error(`Error loading GeoServer tasks for ${taskType}:`, error);
                        });
                });

                return Promise.all(promises).then(() => updateMap());
            }

            function loadIncidents() {
                const url = `http://localhost:8080/geoserver/wfs?service=WFS&version=1.0.0&request=GetFeature&typeName=cite:incidents_layer_2&outputFormat=application/json&srsName=EPSG:4326`;

                return fetch(url)
                    .then(response => response.text().then(text => ({ response, text })))
                    .then(({ response, text }) => {
                        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}, Response: ${text}`);
                        return JSON.parse(text);
                    })
                    .then(data => {
                        incidentsLayer.clearLayers();
                        if (data.features && data.features.length > 0) {
                            data.features.forEach(feature => {
                                if (feature.geometry && feature.geometry.type === "Point") {
                                    const coords = feature.geometry.coordinates;
                                    const marker = L.marker([coords[1], coords[0]]);
                                    const popupContent = createIncidentPopupContent(feature.properties);
                                    marker.bindPopup(popupContent, { autoClose: false }).on('popupopen', function () {
                                        document.getElementById(`update-btn-incident-${feature.properties.incident_id}`).addEventListener('click', function () {
                                            window.location.href = `/Incidents/IncidentUpdate/${feature.properties.incident_id}`;
                                        });
                                        document.getElementById(`detail-btn-incident-${feature.properties.incident_id}`).addEventListener('click', function () {
                                            window.location.href = `/Incidents/IncidentDetail/${feature.properties.incident_id}`;
                                        });
                                    });
                                    incidentsLayer.addLayer(marker);
                                }
                            });
                        }
                        updateMap();
                    })
                    .catch(error => {
                        console.error('Error loading GeoServer incidents:', error);
                        alert('Không thể tải dữ liệu Sự cố từ GeoServer: ' + error.message);
                    });
            }

            function createIncidentPopupContent(props) {
                return `
                            <div class="p-4 max-w-xs font-sans">
                                <h3 class="text-lg font-semibold text-gray-800 mb-2">Thông tin sự cố</h3>
                                <table class="w-full text-sm border-collapse">
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">ID:</td>
                                        <td class="p-2">${props.incident_id}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Địa chỉ:</td>
                                        <td class="p-2">${props.address || 'N/A'}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Tuyến đường:</td>
                                        <td class="p-2">${props.route || 'N/A'}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Mức độ nghiêm trọng:</td>
                                        <td class="p-2">${props.severity_level}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Mức độ thiệt hại:</td>
                                        <td class="p-2">${props.damage_level}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Trạng thái:</td>
                                        <td class="p-2">${props.processing_status}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Task ID:</td>
                                        <td class="p-2">${props.task_id || 'N/A'}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Ngày tạo:</td>
                                        <td class="p-2">${props.created_at || 'N/A'}</td>
                                    </tr>
                                </table>
                                <div class="text-center mt-4">
                                    <button id="update-btn-incident-${props.incident_id}" class="bg-blue-500 text-white px-4 py-1 rounded-lg hover:bg-blue-600 mr-2">Cập nhật</button>
                                    <button id="detail-btn-incident-${props.incident_id}" class="bg-blue-500 text-white px-4 py-1 rounded-lg hover:bg-blue-600">Chi tiết</button>
                                </div>
                            </div>
                        `;
            }

            Promise.all([loadTasks(), loadIncidents()])
                .then(() => {
                    taskCategoryToggles.forEach(toggle => {
                        const taskType = toggle.parentElement.dataset.taskType;
                        const layer = taskType === 'Sửa chữa đột xuất' ? suddenRepairLayer : periodicRepairLayer;
                        if (toggle.checked) {
                            map.addLayer(layer);
                        }
                    });
                    assetCategoryToggles.forEach(toggle => {
                        const categoryId = toggle.parentElement.dataset.categoryId;
                        if (toggle.checked) {
                            map.addLayer(categoryLayers[categoryId]);
                            loadAssets(categoryId);
                        }
                    });
                    if (assetsToggle.checked) {
                        map.on('moveend', debouncedLoadAssets);
                        map._moveendListenerAdded = true;
                    }
                    updateMap();
                })
                .catch(error => console.error('Error loading layers:', error));

            window.exportReports = function () {
                alert('Chọn loại báo cáo để xuất: Nhiệm vụ, Sự cố, hoặc Tài sản.');
            };
        });
    </script>
}