@page "{id:int}"
@model RoadInfrastructureAssetManagementFrontend2.Pages.Tasks.TaskUpdateModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Cập nhật Nhiệm vụ";
}

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            background-color: #f4f6f9;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .container {
            margin-top: 40px;
            max-width: 1200px;
        }

        .form-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            padding: 30px;
            margin-bottom: 40px;
        }

        h1 {
            font-size: 2.5rem;
            color: #2c3e50;
            font-weight: 700;
            margin-bottom: 30px;
            text-align: center;
        }

        h3 {
            font-size: 1.75rem;
            color: #34495e;
            font-weight: 600;
            margin-bottom: 20px;
            border-bottom: 2px solid #3498db;
            padding-bottom: 5px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-control {
            border-radius: 8px;
            padding: 10px;
        }

        .btn-primary {
            background-color: #3498db;
            border-color: #3498db;
            padding: 10px 20px;
            border-radius: 8px;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

            .btn-primary:hover {
                background-color: #2980b9;
                transform: translateY(-2px);
            }

        .btn-secondary {
            background-color: #34495e;
            border-color: #34495e;
            padding: 10px 20px;
            border-radius: 8px;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

            .btn-secondary:hover {
                background-color: #2c3e50;
                transform: translateY(-2px);
            }

        .btn-warning {
            background-color: #f1c40f;
            border-color: #f1c40f;
            padding: 10px 20px;
            border-radius: 8px;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

            .btn-warning:hover {
                background-color: #e1b107;
                transform: translateY(-2px);
            }

        .btn i {
            margin-right: 8px;
        }

        #map {
            height: 400px;
            width: 100%;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        .alert {
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Cập nhật Nhiệm vụ</h1>

        <div class="form-container">
            <h3>Thông tin Nhiệm vụ</h3>

            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger" role="alert">
                    @TempData["Error"]
                </div>
            }
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success" role="alert">
                    @TempData["Success"]
                </div>
            }
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger" role="alert">
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <p>@error.ErrorMessage</p>
                    }
                </div>
            }

            <form method="post">
                <input type="hidden" asp-for="TaskResponse.task_id" />

                <div class="form-group">
                    <label asp-for="TaskRequest.task_type">Loại Nhiệm vụ</label>
                    <input asp-for="TaskRequest.task_type" class="form-control" required />
                    <span asp-validation-for="TaskRequest.task_type" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="TaskRequest.work_volume">Khối lượng công việc</label>
                    <input asp-for="TaskRequest.work_volume" class="form-control" />
                    <span asp-validation-for="TaskRequest.work_volume" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="TaskRequest.status">Trạng thái</label>
                    <select asp-for="TaskRequest.status" class="form-control" required>
                        <option value="">Chọn trạng thái</option>
                        <option value="pending">Pending</option>
                        <option value="in-progress">In Progress</option>
                        <option value="completed">Completed</option>
                        <option value="cancelled">Cancelled</option>
                    </select>
                    <span asp-validation-for="TaskRequest.status" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="TaskRequest.address">Địa chỉ</label>
                    <input asp-for="TaskRequest.address" class="form-control" />
                    <span asp-validation-for="TaskRequest.address" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label for="geometryType">Loại hình học</label>
                    <select class="form-control" id="geometryType" asp-for="TaskRequest.geometry.type" required>
                        <option value="Point">Điểm</option>
                        <option value="LineString">Đường</option>
                    </select>
                    <span asp-validation-for="TaskRequest.geometry.type" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label for="geometrySystem">Hệ tọa độ</label>
                    <select id="geometrySystem" class="form-control" required>
                        <option value="wgs84">WGS84</option>
                        <option value="vn2000">VN2000</option>
                    </select>
                </div>

                <div id="map"></div>
                <div id="coordinatesInput" class="mt-3">
                    <p id="instructionText"></p>
                    <div id="manualCoordinates">
                        <div class="form-group" id="pointInputs">
                            <label for="manualLat">Vĩ độ (Latitude):</label>
                            <input type="number" step="any" id="manualLat" class="form-control" placeholder="Nhập vĩ độ" />
                        </div>
                        <div class="form-group" id="pointInputsLng">
                            <label for="manualLng">Kinh độ (Longitude):</label>
                            <input type="number" step="any" id="manualLng" class="form-control" placeholder="Nhập kinh độ" />
                        </div>
                        <div class="form-group" id="multiCoordsGroup" style="display: none;">
                            <label for="manualCoords">Tọa độ (dạng JSON):</label>
                            <textarea id="manualCoords" class="form-control" rows="3" placeholder='Ví dụ: [[x1, y1], [x2, y2]]'></textarea>
                        </div>
                    </div>
                    <button type="button" id="resetGeometry" class="btn btn-warning mt-2">
                        <i class="fas fa-undo"></i> Đặt lại hình học
                    </button>
                </div>
                <input type="hidden" id="coordinatesJson" asp-for="TaskRequest.geometry.coordinates" />
                <input type="hidden" id="geometrySystemHidden" name="geometrySystem" />

                <div class="form-group">
                    <label asp-for="TaskRequest.start_date">Ngày bắt đầu</label>
                    <input asp-for="TaskRequest.start_date" class="form-control" type="date" />
                    <span asp-validation-for="TaskRequest.start_date" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="TaskRequest.end_date">Ngày kết thúc</label>
                    <input asp-for="TaskRequest.end_date" class="form-control" type="date" />
                    <span asp-validation-for="TaskRequest.end_date" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="TaskRequest.execution_unit_id">Đơn vị thực hiện (ID)</label>
                    <input asp-for="TaskRequest.execution_unit_id" class="form-control" type="number" min="1" />
                    <span asp-validation-for="TaskRequest.execution_unit_id" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="TaskRequest.supervisor_id">Người giám sát (ID)</label>
                    <input asp-for="TaskRequest.supervisor_id" class="form-control" type="number" min="1" />
                    <span asp-validation-for="TaskRequest.supervisor_id" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="TaskRequest.method_summary">Tóm tắt phương pháp</label>
                    <textarea asp-for="TaskRequest.method_summary" class="form-control" rows="3"></textarea>
                    <span asp-validation-for="TaskRequest.method_summary" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="TaskRequest.main_result">Kết quả chính</label>
                    <textarea asp-for="TaskRequest.main_result" class="form-control" rows="3"></textarea>
                    <span asp-validation-for="TaskRequest.main_result" class="text-danger"></span>
                </div>

                <div class="form-group text-center">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Cập nhật Nhiệm vụ
                    </button>
                    <a asp-page="/Tasks/Detail" asp-route-id="@Model.TaskResponse.task_id" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Quay lại
                    </a>
                </div>
            </form>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script>
        var map = L.map('map').setView([21.0285, 105.8542], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        var originalGeometry = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TaskResponse.geometry));
        var currentGeometryWGS84 = JSON.parse(JSON.stringify(originalGeometry));
        var layer;
        var selectedCoordinates = [];

        function initializeForm() {
            var geoType = document.getElementById('geometryType').value.toLowerCase();
            var instructionText = document.getElementById('instructionText');
            var pointInputs = document.getElementById('pointInputs');
            var pointInputsLng = document.getElementById('pointInputsLng');
            var multiCoordsGroup = document.getElementById('multiCoordsGroup');

            map.off('click').off('dblclick');
            selectedCoordinates = [];
            currentGeometryWGS84.type = geoType === 'point' ? 'Point' : 'LineString';

            if (geoType === 'point') {
                instructionText.textContent = 'Click trên bản đồ để chọn một điểm hoặc nhập tọa độ thủ công bên dưới.';
                pointInputs.style.display = 'block';
                pointInputsLng.style.display = 'block';
                multiCoordsGroup.style.display = 'none';
                map.on('click', onMapClickPoint);
            } else if (geoType === 'linestring') {
                instructionText.textContent = 'Click trên bản đồ để thêm điểm vào đường (double-click để kết thúc) hoặc nhập tọa độ thủ công bên dưới.';
                pointInputs.style.display = 'none';
                pointInputsLng.style.display = 'none';
                multiCoordsGroup.style.display = 'block';
                map.on('click', onMapClickLine);
                map.on('dblclick', finishLineString);
            }

            initializeLayer();
            updateInputs();
        }

        function initializeLayer() {
            if (layer) map.removeLayer(layer);
            if (currentGeometryWGS84.type === 'Point') {
                layer = L.marker([currentGeometryWGS84.coordinates[1], currentGeometryWGS84.coordinates[0]]).addTo(map);
                map.setView([currentGeometryWGS84.coordinates[1], currentGeometryWGS84.coordinates[0]], 13);
            } else if (currentGeometryWGS84.type === 'LineString') {
                layer = L.polyline(currentGeometryWGS84.coordinates.map(c => [c[1], c[0]]), { color: 'blue' }).addTo(map);
                map.fitBounds(layer.getBounds());
            }
            updateHiddenInputs();
        }

        function updateLayer() {
            if (layer) map.removeLayer(layer);
            if (currentGeometryWGS84.type === 'Point') {
                layer = L.marker([currentGeometryWGS84.coordinates[1], currentGeometryWGS84.coordinates[0]]).addTo(map);
            } else if (currentGeometryWGS84.type === 'LineString') {
                layer = L.polyline(selectedCoordinates.length > 0 ? selectedCoordinates.map(c => [c[1], c[0]]) : currentGeometryWGS84.coordinates.map(c => [c[1], c[0]]), { color: 'blue' }).addTo(map);
            }
            updateHiddenInputs();
        }

        function updateInputs() {
            var system = document.getElementById('geometrySystem').value;
            var geoType = document.getElementById('geometryType').value.toLowerCase();
            if (geoType === 'point') {
                var coords = currentGeometryWGS84.coordinates;
                document.getElementById('manualLat').value = coords[1] || '';
                document.getElementById('manualLng').value = coords[0] || '';
            } else {
                var coords = selectedCoordinates.length > 0 ? selectedCoordinates : currentGeometryWGS84.coordinates;
                document.getElementById('manualCoords').value = JSON.stringify(coords) || '';
            }
        }

        function updateHiddenInputs() {
            var system = document.getElementById('geometrySystem').value;
            var coords = currentGeometryWGS84.type === 'LineString' && selectedCoordinates.length > 0 ? selectedCoordinates : currentGeometryWGS84.coordinates;
            document.getElementById('coordinatesJson').value = JSON.stringify(coords);
            document.getElementById('geometrySystemHidden').value = system;
        }

        function onMapClickPoint(e) {
            currentGeometryWGS84 = { type: 'Point', coordinates: [e.latlng.lng, e.latlng.lat] };
            updateLayer();
            updateInputs();
        }

        function onMapClickLine(e) {
            selectedCoordinates.push([e.latlng.lng, e.latlng.lat]);
            updateLayer();
        }

        function finishLineString() {
            if (selectedCoordinates.length < 2) {
                alert('LineString cần ít nhất 2 điểm.');
                return;
            }
            currentGeometryWGS84 = { type: 'LineString', coordinates: selectedCoordinates };
            selectedCoordinates = [];
            updateLayer();
            updateInputs();
            map.off('click').off('dblclick');
        }

        function resetGeometry() {
            currentGeometryWGS84 = JSON.parse(JSON.stringify(originalGeometry));
            selectedCoordinates = [];
            initializeForm();
        }

        document.getElementById('geometryType').addEventListener('change', function () {
            initializeForm();
        });

        document.getElementById('geometrySystem').addEventListener('change', function () {
            updateInputs();
        });

        document.getElementById('resetGeometry').addEventListener('click', resetGeometry);

        document.getElementById('manualLat').addEventListener('input', onManualInputChange);
        document.getElementById('manualLng').addEventListener('input', onManualInputChange);
        document.getElementById('manualCoords').addEventListener('input', onManualInputChange);

        function onManualInputChange() {
            var geoType = document.getElementById('geometryType').value.toLowerCase();
            var system = document.getElementById('geometrySystem').value;

            if (geoType === 'point') {
                var lat = parseFloat(document.getElementById('manualLat').value);
                var lng = parseFloat(document.getElementById('manualLng').value);
                if (!isNaN(lat) && !isNaN(lng)) {
                    currentGeometryWGS84 = { type: 'Point', coordinates: [lng, lat] };
                    updateLayer();
                    updateInputs();
                }
            } else {
                try {
                    var coords = JSON.parse(document.getElementById('manualCoords').value);
                    currentGeometryWGS84 = { type: 'LineString', coordinates: coords };
                    selectedCoordinates = coords;
                    updateLayer();
                    updateInputs();
                } catch (e) {
                    console.error('Invalid coordinates JSON:', e);
                }
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            initializeForm();
        });
    </script>
</body>
</html>