@page
@model RoadInfrastructureAssetManagementFrontend.Pages.Tasks.IndexModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Danh sách Nhiệm vụ";
}

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            background-color: #f4f6f9;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .container {
            margin-top: 40px;
            max-width: 1400px;
        }

        h1 {
            font-size: 2.5rem;
            color: #2c3e50;
            font-weight: 700;
            margin-bottom: 30px;
            text-align: center;
        }

        #map {
            height: 600px;
            width: 100%;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        .alert {
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }

        .btn-primary {
            background-color: #3498db;
            border-color: #3498db;
            padding: 10px 20px;
            border-radius: 8px;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .btn-primary:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

        .btn i {
            margin-right: 8px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Danh sách Nhiệm vụ</h1>

        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger" role="alert">
                @TempData["Error"]
            </div>
        }

        <div class="mb-3 text-center">
            <a class="btn btn-primary" asp-page="/Tasks/TaskCreate">
                <i class="fas fa-plus"></i> Tạo Nhiệm vụ mới
            </a>
        </div>

        <div id="map"></div>
    </div>

    @Html.AntiForgeryToken()
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script>
        // Initialize map
        var map = L.map('map').setView([21.0285, 105.8542], 13);

        // Add OpenStreetMap base layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Add GeoServer WMS layer (placeholder)
        var wmsLayer = L.tileLayer.wms('http://localhost:8080/geoserver/wms', {
            layers: 'road_incidents',
            format: 'image/png',
            transparent: true,
            attribution: 'GeoServer'
        }).addTo(map);

        // Fetch tasks from GeoServer WFS
        var wfsUrl = 'http://localhost:8080/geoserver/wfs?service=WFS&version=1.0.0&request=GetFeature&typeName=cite:tasks_layer_2&outputFormat=application/json';

        var taskLayer = L.geoJSON(null, {
            pointToLayer: function(feature, latlng) {
                return L.marker(latlng);
            },
            style: function(feature) {
                if (feature.geometry.type === 'LineString') {
                    return { color: 'blue', weight: 3 };
                }
                return {};
            },
            onEachFeature: function(feature, layer) {
                if (feature.properties) {
                    var props = feature.properties;
                    var popupContent = `
                        <b>Mã Nhiệm vụ:</b> ${props.task_id || 'Chưa có'}<br>
                        <b>Loại Nhiệm vụ:</b> ${props.task_type || 'Chưa có'}<br>
                        <b>Trạng thái:</b> ${props.status || 'Chưa có'}<br>
                        <b>Địa chỉ:</b> ${props.address || 'Chưa có'}<br>
                        <b>Ngày bắt đầu:</b> ${props.start_date ? new Date(props.start_date).toLocaleDateString('vi-VN') : 'Chưa có'}<br>
                        <button id="update-btn-${props.task_id}" class="btn btn-primary btn-sm mt-2">Cập nhật</button>
                        <button id="detail-btn-${props.task_id}" class="btn btn-primary btn-sm mt-2">Chi tiết</button>
                        <button id="delete-btn-${props.task_id}" class="btn btn-danger btn-sm mt-2">Xóa</button>
                    `;
                    layer.bindPopup(popupContent, { autoClose: false }).on('popupopen', function() {
                        // Update button
                        document.getElementById('update-btn-' + props.task_id).addEventListener('click', function() {
                            window.location.href = '/Tasks/TaskUpdate/' + props.task_id;
                        });
                        // Detail button
                        document.getElementById('detail-btn-' + props.task_id).addEventListener('click', function() {
                            window.location.href = '/Tasks/TaskDetail/' + props.task_id;
                        });
                        // Delete button
                        document.getElementById('delete-btn-' + props.task_id).addEventListener('click', function() {
                            if (confirm('Bạn có chắc chắn muốn xóa nhiệm vụ này?')) {
                                $.ajax({
                                    url: '/Tasks/Index?handler=Delete',
                                    type: 'POST',
                                    data: { id: props.task_id },
                                    headers: {
                                        "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                                    },
                                    success: function(response) {
                                        if (response.success) {
                                            map.removeLayer(layer);
                                            alert('Xóa nhiệm vụ thành công!');
                                        } else {
                                            alert('Xóa nhiệm vụ thất bại: ' + (response.message || 'Không rõ nguyên nhân'));
                                        }
                                    },
                                    error: function(xhr) {
                                        let errorMsg = xhr.responseJSON?.message || 'Đã xảy ra lỗi khi xóa nhiệm vụ.';
                                        alert(errorMsg);
                                    }
                                });
                            }
                        });
                    });
                }
            }
        });

        fetch(wfsUrl)
            .then(response => response.json())
            .then(data => {
                taskLayer.addData(data);
                taskLayer.addTo(map);

                // Fit map to task bounds
                if (taskLayer.getLayers().length > 0) {
                    map.fitBounds(taskLayer.getBounds());
                }
            })
            .catch(error => {
                console.error('Error loading GeoServer data:', error);
                alert('Không thể tải dữ liệu từ GeoServer.');
            });
    </script>
</body>
</html>