@page
@model RoadInfrastructureAssetManagementFrontend2.Pages.Tasks.IndexModel

@{
    Layout = "_Layout";
    ViewData["Title"] = "Danh sách Nhiệm vụ";
    ViewData["Mapview"] = "Leaflet";
}

<div id="map" class="absolute top-16 left-0 right-0 bottom-0 z-0"></div>

<button class="toggle-filter-btn fixed top-24 left-4 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg hover:bg-blue-700 transition z-10" id="toggleFilterBtn">
    <i class="fas fa-filter mr-2"></i> Tìm kiếm
</button>

<div class="navbar-filter fixed top-0 -left-80 w-80 h-full bg-white bg-opacity-95 p-6 z-50 shadow-lg transition-all duration-300" id="filterNavbar">
    <button class="close-filter-btn absolute top-4 right-4 text-gray-600 hover:text-red-600 transition" id="closeFilterBtn">
        <i class="fas fa-times"></i>
    </button>
    <h4 class="text-gray-800 font-bold mb-6">Tìm kiếm Nhiệm vụ</h4>
    <div class="mb-4">
        <label class="block text-gray-700 font-semibold mb-2">Tìm kiếm</label>
        <input type="text" id="searchFilter" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Nhập loại nhiệm vụ hoặc địa chỉ">
    </div>
</div>

<div class="fixed top-20 right-4 z-10 max-w-xs">
    <div class="bg-white bg-opacity-90 p-4 rounded-lg shadow-lg">
        <h1 class="text-xl font-bold text-gray-800 mb-4">Danh sách Nhiệm vụ</h1>
        @if (TempData["Error"] != null)
        {
            <div class="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg">
                @TempData["Error"]
            </div>
        }
        <div class="flex flex-col gap-2">
            <a class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition w-full block text-center" asp-page="/Tasks/TaskCreate">
                <i class="fas fa-plus mr-2"></i> Tạo Nhiệm vụ mới
            </a>
            @if (HttpContext.Session.GetString("Role") == "manager" || HttpContext.Session.GetString("Role") == "inspector")
            {
                <button class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition w-full mb-2" onclick="exportIncidentsReport()">
                    <i class="fas fa-file-export mr-2"></i> Xuất báo cáo
                </button>
            }
        </div>
    </div>
</div>

<div class="search-message hidden fixed top-32 left-4 bg-white bg-opacity-90 p-4 rounded-lg shadow-lg z-10 text-gray-700" id="searchMessage"></div>

@Html.AntiForgeryToken()
@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        // Lấy trực tiếp từ HttpContext.Session
        const userTaskRole = '@(HttpContext.Session.GetString("Role") ?? "")';
        const userTaskId = @(HttpContext.Session.GetInt32("Id")?.ToString() ?? "0");
        console.log('User Task Role:', userTaskRole, 'User Task ID:', userTaskId);

        // Kiểm tra session hợp lệ
        if (!userTaskRole || userTaskId === 0) {
            console.warn('Session invalid: Role or ID missing. Redirecting to login.');
            alert('Phiên đăng nhập không hợp lệ. Vui lòng đăng nhập lại.');
            window.location.href = '/Users/Login';
        }

        function toggleFilterNavbar() {
            var navbar = document.getElementById('filterNavbar');
            navbar.classList.toggle('open');
            if (navbar.classList.contains('open')) {
                navbar.style.left = '0';
            } else {
                navbar.style.left = '-20rem';
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const map = L.map('map').setView([21.0285, 105.8542], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            const wmsLayer = L.tileLayer.wms('http://localhost:8080/geoserver/wms', {
                layers: 'road_incidents',
                format: 'image/png',
                transparent: true,
                attribution: 'GeoServer'
            }).addTo(map);

            const taskLayer = L.geoJSON(null, {
                pointToLayer: function (feature, latlng) {
                    return L.marker(latlng);
                },
                style: function (feature) {
                    if (feature.geometry.type === 'LineString') {
                        return { color: 'blue', weight: 3 };
                    }
                    return {};
                },
                onEachFeature: function (feature, layer) {
                    if (feature.properties) {
                        const props = feature.properties;
                        const popupContent = `
                            <div class="p-4 max-w-xs font-sans text-gray-800">
                                <h3 class="text-lg font-semibold text-gray-800 mb-2">Thông tin nhiệm vụ</h3>
                                <table class="w-full text-sm border-collapse">
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Mã Nhiệm vụ:</td>
                                        <td class="p-2">${props.task_id || 'Chưa có'}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Loại Nhiệm vụ:</td>
                                        <td class="p-2">${props.task_type || 'Chưa có'}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Trạng thái:</td>
                                        <td class="p-2">${props.status || 'Chưa có'}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Địa chỉ:</td>
                                        <td class="p-2">${props.address || 'Chưa có'}</td>
                                    </tr>
                                    <tr class="border-b">
                                        <td class="p-2 font-semibold">Ngày bắt đầu:</td>
                                        <td class="p-2">${props.start_date ? new Date(props.start_date).toLocaleDateString('vi-VN') : 'Chưa có'}</td>
                                    </tr>
                                </table>
                                <div class="text-center mt-4 flex justify-center gap-2">
                                    <button id="update-btn-${props.task_id}" class="bg-blue-500 text-white px-3 py-1 rounded-lg shadow-md hover:bg-blue-600 transition duration-200">Cập nhật</button>
                                    <button id="detail-btn-${props.task_id}" class="bg-blue-500 text-white px-3 py-1 rounded-lg shadow-md hover:bg-blue-600 transition duration-200">Chi tiết</button>
                                    <button id="delete-btn-${props.task_id}" class="bg-red-500 text-white px-3 py-1 rounded-lg shadow-md hover:bg-red-600 transition duration-200">Xóa</button>
                                </div>
                            </div>
                        `;
                        layer.bindPopup(popupContent, { autoClose: false }).on('popupopen', function () {
                            document.getElementById(`update-btn-${props.task_id}`).addEventListener('click', function () {
                                window.location.href = `/Tasks/TaskUpdate/${props.task_id}`;
                            });
                            document.getElementById(`detail-btn-${props.task_id}`).addEventListener('click', function () {
                                window.location.href = `/Tasks/TaskDetail/${props.task_id}`;
                            });
                            document.getElementById(`delete-btn-${props.task_id}`).addEventListener('click', function () {
                                if (confirm('Bạn có chắc chắn muốn xóa nhiệm vụ này?')) {
                                    $.ajax({
                                        url: '/Tasks/Index?handler=Delete',
                                        type: 'POST',
                                        data: { id: props.task_id },
                                        headers: {
                                            "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                                        },
                                        success: function (response) {
                                            if (response.success) {
                                                map.removeLayer(layer);
                                                alert('Xóa nhiệm vụ thành công!');
                                            } else {
                                                alert('Xóa nhiệm vụ thất bại: ' + (response.message || 'Không rõ nguyên nhân'));
                                            }
                                        },
                                        error: function (xhr) {
                                            let errorMsg = xhr.responseJSON?.message || 'Đã xảy ra lỗi khi xóa nhiệm vụ.';
                                            alert(errorMsg);
                                        }
                                    });
                                }
                            });
                        });
                    }
                }
            }).addTo(map);

            function getCachedData(key, maxAgeInSec = 600) {
                const cached = localStorage.getItem(key);
                if (cached) {
                    const { data, timestamp } = JSON.parse(cached);
                    const age = (Date.now() - timestamp) / 1000;
                    if (age < maxAgeInSec) return data;
                    localStorage.removeItem(key);
                }
                return null;
            }

            function setCachedData(key, data) {
                localStorage.setItem(key, JSON.stringify({ data, timestamp: Date.now() }));
            }

            function loadTasks(searchKeyword = '') {
                const cacheKey = `geoserver_tasks_${encodeURIComponent(searchKeyword)}_${userTaskRole}_${userTaskId}`;
                const cachedData = getCachedData(cacheKey);

                if (cachedData) {
                    taskLayer.clearLayers();
                    taskLayer.addData(cachedData);
                    updateMap();
                    return Promise.resolve();
                }

                let cqlFilter = '1=1';
                if (userTaskRole === 'technician' && userTaskId > 0) {
                    cqlFilter = `execution_unit_id = ${userTaskId}`;
                }
                if (searchKeyword) {
                    const safeKeyword = searchKeyword.trim().replace(/'/g, "''");
                    const searchFilter = `task_type ILIKE '%${safeKeyword}%' OR address ILIKE '%${safeKeyword}%'`;
                    cqlFilter = cqlFilter === '1=1' ? searchFilter : `${cqlFilter} AND (${searchFilter})`;
                }

                const wfsUrl = `http://localhost:8080/geoserver/wfs?service=WFS&version=1.0.0&request=GetFeature&typeName=cite:tasks_layer_2&outputFormat=application/json&srsName=EPSG:4326&cql_filter=${encodeURIComponent(cqlFilter)}`;
                console.log('WFS URL:', wfsUrl);

                return fetch(wfsUrl)
                    .then(response => response.text().then(text => ({ response, text })))
                    .then(({ response, text }) => {
                        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}, Response: ${text}`);
                        return JSON.parse(text);
                    })
                    .then(data => {
                        taskLayer.clearLayers();
                        if (data.features && data.features.length > 0) {
                            setCachedData(cacheKey, data);
                            taskLayer.addData(data);
                        }
                        updateMap();
                    })
                    .catch(error => {
                        console.error('Error loading GeoServer data:', error);
                        alert('Không thể tải dữ liệu từ GeoServer: ' + error.message);
                    });
            }

            function updateMap() {
                const searchKeyword = document.getElementById('searchFilter').value.trim();
                const searchMessage = document.getElementById('searchMessage');
                const totalFeatures = taskLayer.getLayers().length;

                if (searchKeyword) {
                    searchMessage.style.display = 'block';
                    searchMessage.textContent = totalFeatures > 0
                        ? `Tìm thấy ${totalFeatures} nhiệm vụ khớp với "${searchKeyword}"`
                        : `Không tìm thấy nhiệm vụ nào khớp với "${searchKeyword}"`;
                } else {
                    searchMessage.style.display = 'none';
                }

                if (totalFeatures > 0) {
                    const bounds = taskLayer.getBounds();
                    if (bounds.isValid()) {
                        map.fitBounds(bounds, { padding: [50, 50] });
                    } else {
                        map.setView([21.0285, 105.8542], 13);
                    }
                } else {
                    map.setView([21.0285, 105.8542], 13);
                }
            }

            const toggleBtn = document.getElementById('toggleFilterBtn');
            const closeBtn = document.getElementById('closeFilterBtn');
            const searchInput = document.getElementById('searchFilter');

            if (toggleBtn) toggleBtn.addEventListener('click', toggleFilterNavbar);
            if (closeBtn) closeBtn.addEventListener('click', toggleFilterNavbar);

            if (searchInput) {
                let debounceTimeout;
                searchInput.addEventListener('input', function () {
                    clearTimeout(debounceTimeout);
                    debounceTimeout = setTimeout(() => loadTasks(searchInput.value.trim()), 500);
                });
            }

            loadTasks();

            // Export report function
            window.exportTasksReport = function () {
                window.location.href = "/Tasks/Index?handler=ExportExcel";
            };
        });
    </script>
}